// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using CapMobileWebApp.DAL.Model;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace CapMobileWebApp.DAL.Context
{
    public partial class CapRetailContext
    {
        private ICapRetailContextProcedures _procedures;

        public virtual ICapRetailContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new CapRetailContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ICapRetailContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DataCorrectionSpecialCaseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getAssignedAreasResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDashboardGraphResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDelayedProcessResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetManagerDashBoardDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetManagerDashBoardDataTestJvResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getPotentialResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getrecordsemp1Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<SD_SelectResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectRoleResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_getPendencyReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetTrainingTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_AddQuestionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_ApplicationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_BrandingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_Branding2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_CashFlowResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_CenterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_FaceTaggingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_GetODReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_GroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_GroupTrainingProcessResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_GroupTrainingProcess2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_LoanTransactionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_MeetingParticipantsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_SurveyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_syncDataByBEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_TrainingAnswersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spI_TrainingReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spIU_MBBResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spIU_MBBAttendanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spl_getContactInfoFromCGroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spl_ResetCGTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spl_VE_getMobileNoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spS_EMICalculationDataByUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spS_FS_EMICalculationDataByUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spS_FS_FaceTaggingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spS_ValidateLoginResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spU_FS_VerifyApplicationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spU_FS_VerifyCenterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spU_FS_VerifyGroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spU_FS_VerifySurveyResult>().HasNoKey().ToView(null);
        }
    }

    public partial class CapRetailContextProcedures : ICapRetailContextProcedures
    {
        private readonly CapRetailContext _context;

        public CapRetailContextProcedures(CapRetailContext context)
        {
            _context = context;
        }

        public virtual async Task<int> addaccAsync(long? cid, string status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cid",
                    Value = cid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 100,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[addacc] @cid, @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ApproveTransactionAsync(long? transactionid, string status, long? TEID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "transactionid",
                    Value = transactionid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 100,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TEID",
                    Value = TEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ApproveTransaction] @transactionid, @status, @TEID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> AssignAreaToTEAsync(long? NewFieldOfficer, long? AssignedBy, long? SurveyInformationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NewFieldOfficer",
                    Value = NewFieldOfficer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AssignedBy",
                    Value = AssignedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SurveyInformationId",
                    Value = SurveyInformationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AssignAreaToTE] @NewFieldOfficer, @AssignedBy, @SurveyInformationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> AssignBEtoFOAsync(long? BEid, long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BEid",
                    Value = BEid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AssignBEtoFO] @BEid, @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ChangeportfolioAsync(long? oldid, long? UserId, long? BranchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "oldid",
                    Value = oldid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Changeportfolio] @oldid, @UserId, @BranchId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DataCorrectionPartialAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DataCorrectionPartial]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DataCorrectionSpecialCaseResult>> DataCorrectionSpecialCaseAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DataCorrectionSpecialCaseResult>("EXEC @returnValue = [dbo].[DataCorrectionSpecialCase]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ExportTrainingReportAsync(long? TestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TestID",
                    Value = TestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ExportTrainingReport] @TestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> FebCollFixAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[FebCollFix]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getAssignedAreasResult>> getAssignedAreasAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getAssignedAreasResult>("EXEC @returnValue = [dbo].[getAssignedAreas] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDashboardGraphResult>> GetDashboardGraphAsync(long? BranchId, long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDashboardGraphResult>("EXEC @returnValue = [dbo].[GetDashboardGraph] @BranchId, @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDelayedProcessResult>> GetDelayedProcessAsync(long? BranchId, long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDelayedProcessResult>("EXEC @returnValue = [dbo].[GetDelayedProcess] @BranchId, @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetManagerDashBoardDataResult>> GetManagerDashBoardDataAsync(long? BranchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetManagerDashBoardDataResult>("EXEC @returnValue = [dbo].[GetManagerDashBoardData] @BranchId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetManagerDashBoardDataTestJvResult>> GetManagerDashBoardDataTestJvAsync(long? BranchIdParm, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchIdParm",
                    Value = BranchIdParm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetManagerDashBoardDataTestJvResult>("EXEC @returnValue = [dbo].[GetManagerDashBoardDataTestJv] @BranchIdParm", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getPotentialResult>> getPotentialAsync(string SurveyArea, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SurveyArea",
                    Size = -1,
                    Value = SurveyArea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getPotentialResult>("EXEC @returnValue = [dbo].[getPotential] @SurveyArea", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getrecordsemp1Result>> getrecordsemp1Async(DateTime? startdate, DateTime? enddate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startdate",
                    Value = startdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "enddate",
                    Value = enddate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getrecordsemp1Result>("EXEC @returnValue = [dbo].[getrecordsemp1] @startdate, @enddate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> MoveCustomerToBlcAsync(long? BranchId, long? CenterId, long? GroupId, long? CustomerId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CenterId",
                    Value = CenterId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "GroupId",
                    Value = GroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerId",
                    Value = CustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[MoveCustomerToBlc] @BranchId, @CenterId, @GroupId, @CustomerId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ODinterestCorrectionAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ODinterestCorrection]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveCreditBureauInfoAsync(int? CustomerId, string ReferenceId, DateTime? CreatedDate, int? CreatedBy, bool? IsActive, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerId",
                    Value = CustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = -1,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedDate",
                    Value = CreatedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = IsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveCreditBureauInfo] @CustomerId, @ReferenceId, @CreatedDate, @CreatedBy, @IsActive", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SD_AddBranchAsync(long? BranchId, string BranchName, string BranchAddress, string BranchCity, string BranchState, string BranchCode, DateTime? bdate, bool? Active, string LatLong, string Latitude, string Longitude, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BranchName",
                    Size = 210,
                    Value = BranchName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchAddress",
                    Size = -1,
                    Value = BranchAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchCity",
                    Size = 110,
                    Value = BranchCity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchState",
                    Size = 100,
                    Value = BranchState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchCode",
                    Size = 100,
                    Value = BranchCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bdate",
                    Value = bdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Active",
                    Value = Active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LatLong",
                    Size = 100,
                    Value = LatLong ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Latitude",
                    Size = 510,
                    Value = Latitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Longitude",
                    Size = 510,
                    Value = Longitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SD_AddBranch] @BranchId, @BranchName, @BranchAddress, @BranchCity, @BranchState, @BranchCode, @bdate, @Active, @LatLong, @Latitude, @Longitude", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SD_DeleteAsync(int? RoleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SD_Delete] @RoleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SD_InsertAsync(int? RoleId, string RoleName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RoleName",
                    Size = 100,
                    Value = RoleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SD_Insert] @RoleId, @RoleName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SD_SelectResult>> SD_SelectAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SD_SelectResult>("EXEC @returnValue = [dbo].[SD_Select]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SD_UpdateAsync(int? RoleId, string RoleName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RoleName",
                    Size = 100,
                    Value = RoleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SD_Update] @RoleId, @RoleName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectRoleResult>> SelectRoleAsync(int? RoleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectRoleResult>("EXEC @returnValue = [dbo].[SelectRole] @RoleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_getPendencyReportResult>> sp_getPendencyReportAsync(int? userid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userid",
                    Value = userid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_getPendencyReportResult>("EXEC @returnValue = [dbo].[sp_getPendencyReport] @userid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetTrainingTestResult>> sp_GetTrainingTestAsync(long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetTrainingTestResult>("EXEC @returnValue = [dbo].[sp_GetTrainingTest] @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_VE_SyncDataByVEAsync(string UserIds, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserIds",
                    Size = -1,
                    Value = UserIds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_VE_SyncDataByVE] @UserIds", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_AddQuestionsResult>> spI_AddQuestionsAsync(string Question, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Question",
                    Size = -1,
                    Value = Question ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_AddQuestionsResult>("EXEC @returnValue = [dbo].[spI_AddQuestions] @Question", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_ApplicationResult>> spI_ApplicationAsync(long? CustomerId, string CustomerName, DateTime? AccountDate, string ResAddress, string OffAddress, string TelPhoneNo, string MobileNo, string PhotoIdentityNumber, string PanCardNo, DateTime? BirthDate, int? Age, long? ActiveBy, string City, string MState, string EmailID, int? PinCode, byte[] PhotoId, byte[] Mphoto, string IdType, long? GroupId, string GroupName, string CenterName, long? BranchId, double? PrpoposedLoanAmount, long? LoanTypeId, string LoanCycleNo, string MartialStatus, string SpouseName, DateTime? SpouseDOB, string NomineeName, string NomineeAge, string NomineeRelation, string Religion, string Caste, string Gender, string ApplicantFather, string FamilyDetails, string FamilyRelation, string RationCardNo, string VoterIdCardNo, string UidNo, string LoanPurpose, byte[] IDProof1, byte[] IDProof2, byte[] CustomerSign, string FamilyDetails2, string FamilyRelation2, string FamilyDetails3, string FamilyRelation3, string FamilyDetails4, string FamilyRelation4, string ManagerApproval, string ManagerRemark, byte[] TEBusinessActivity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerId",
                    Value = CustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerName",
                    Size = 110,
                    Value = CustomerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountDate",
                    Value = AccountDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ResAddress",
                    Size = 1000,
                    Value = ResAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OffAddress",
                    Size = 255,
                    Value = OffAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TelPhoneNo",
                    Size = 25,
                    Value = TelPhoneNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobileNo",
                    Size = 14,
                    Value = MobileNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhotoIdentityNumber",
                    Size = 25,
                    Value = PhotoIdentityNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PanCardNo",
                    Size = 25,
                    Value = PanCardNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BirthDate",
                    Value = BirthDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Age",
                    Value = Age ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ActiveBy",
                    Value = ActiveBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 35,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MState",
                    Size = 25,
                    Value = MState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmailID",
                    Size = 255,
                    Value = EmailID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PinCode",
                    Value = PinCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhotoId",
                    Value = PhotoId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "Mphoto",
                    Value = Mphoto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "IdType",
                    Size = 50,
                    Value = IdType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupId",
                    Value = GroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "GroupName",
                    Size = 50,
                    Value = GroupName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CenterName",
                    Size = 50,
                    Value = CenterName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PrpoposedLoanAmount",
                    Value = PrpoposedLoanAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "LoanTypeId",
                    Value = LoanTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LoanCycleNo",
                    Size = 100,
                    Value = LoanCycleNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MartialStatus",
                    Size = 100,
                    Value = MartialStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseName",
                    Size = 100,
                    Value = SpouseName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseDOB",
                    Value = SpouseDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "NomineeName",
                    Size = 100,
                    Value = NomineeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NomineeAge",
                    Size = 100,
                    Value = NomineeAge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NomineeRelation",
                    Size = 100,
                    Value = NomineeRelation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Religion",
                    Size = 100,
                    Value = Religion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Caste",
                    Size = 100,
                    Value = Caste ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 100,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicantFather",
                    Size = 100,
                    Value = ApplicantFather ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FamilyDetails",
                    Size = 100,
                    Value = FamilyDetails ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FamilyRelation",
                    Size = 100,
                    Value = FamilyRelation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RationCardNo",
                    Size = 100,
                    Value = RationCardNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VoterIdCardNo",
                    Size = 100,
                    Value = VoterIdCardNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UidNo",
                    Size = 100,
                    Value = UidNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LoanPurpose",
                    Size = 100,
                    Value = LoanPurpose ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IDProof1",
                    Value = IDProof1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "IDProof2",
                    Value = IDProof2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerSign",
                    Value = CustomerSign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "FamilyDetails2",
                    Size = 100,
                    Value = FamilyDetails2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FamilyRelation2",
                    Size = 100,
                    Value = FamilyRelation2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FamilyDetails3",
                    Size = 100,
                    Value = FamilyDetails3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FamilyRelation3",
                    Size = 100,
                    Value = FamilyRelation3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FamilyDetails4",
                    Size = 100,
                    Value = FamilyDetails4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FamilyRelation4",
                    Size = 100,
                    Value = FamilyRelation4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ManagerApproval",
                    Size = 100,
                    Value = ManagerApproval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ManagerRemark",
                    Size = 500,
                    Value = ManagerRemark ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TEBusinessActivity",
                    Value = TEBusinessActivity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_ApplicationResult>("EXEC @returnValue = [dbo].[spI_Application] @CustomerId, @CustomerName, @AccountDate, @ResAddress, @OffAddress, @TelPhoneNo, @MobileNo, @PhotoIdentityNumber, @PanCardNo, @BirthDate, @Age, @ActiveBy, @City, @MState, @EmailID, @PinCode, @PhotoId, @Mphoto, @IdType, @GroupId, @GroupName, @CenterName, @BranchId, @PrpoposedLoanAmount, @LoanTypeId, @LoanCycleNo, @MartialStatus, @SpouseName, @SpouseDOB, @NomineeName, @NomineeAge, @NomineeRelation, @Religion, @Caste, @Gender, @ApplicantFather, @FamilyDetails, @FamilyRelation, @RationCardNo, @VoterIdCardNo, @UidNo, @LoanPurpose, @IDProof1, @IDProof2, @CustomerSign, @FamilyDetails2, @FamilyRelation2, @FamilyDetails3, @FamilyRelation3, @FamilyDetails4, @FamilyRelation4, @ManagerApproval, @ManagerRemark, @TEBusinessActivity", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_BrandingResult>> spI_BrandingAsync(int? id, string AreaName, string SubAreaName, string ScheduledDate, string ScheduledTime, string ContactPerson, string ContactNumber, string MeetingStatus, string Remark, string MeetingCompletedDT, int? CompletedBy, int? RescheduledTimes, string OriginalScheduledDate, int? NoOfProspects, string Deliverables, byte[] Photo, string MeetingType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AreaName",
                    Size = -1,
                    Value = AreaName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubAreaName",
                    Size = -1,
                    Value = SubAreaName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ScheduledDate",
                    Size = 100,
                    Value = ScheduledDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ScheduledTime",
                    Size = 20,
                    Value = ScheduledTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPerson",
                    Size = -1,
                    Value = ContactPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactNumber",
                    Size = 30,
                    Value = ContactNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MeetingStatus",
                    Size = 40,
                    Value = MeetingStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Remark",
                    Size = -1,
                    Value = Remark ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MeetingCompletedDT",
                    Size = 100,
                    Value = MeetingCompletedDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompletedBy",
                    Value = CompletedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RescheduledTimes",
                    Value = RescheduledTimes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OriginalScheduledDate",
                    Size = 100,
                    Value = OriginalScheduledDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NoOfProspects",
                    Value = NoOfProspects ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Deliverables",
                    Size = -1,
                    Value = Deliverables ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Photo",
                    Value = Photo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "MeetingType",
                    Size = -1,
                    Value = MeetingType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_BrandingResult>("EXEC @returnValue = [dbo].[spI_Branding] @id, @AreaName, @SubAreaName, @ScheduledDate, @ScheduledTime, @ContactPerson, @ContactNumber, @MeetingStatus, @Remark, @MeetingCompletedDT, @CompletedBy, @RescheduledTimes, @OriginalScheduledDate, @NoOfProspects, @Deliverables, @Photo, @MeetingType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_Branding2Result>> spI_Branding2Async(string AreaName, string SubAreaName, string ScheduledDate, string ContactPerson, string ContactNumber, string MeetingStatus, string Remark, string MeetingCompletedDT, int? CompletedBy, int? RescheduledTimes, string OriginalScheduledDate, int? NoOfProspects, string Deliverables, byte[] Photo, string MeetingType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AreaName",
                    Size = -1,
                    Value = AreaName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubAreaName",
                    Size = -1,
                    Value = SubAreaName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ScheduledDate",
                    Size = 100,
                    Value = ScheduledDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPerson",
                    Size = -1,
                    Value = ContactPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactNumber",
                    Size = 30,
                    Value = ContactNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MeetingStatus",
                    Size = 40,
                    Value = MeetingStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Remark",
                    Size = -1,
                    Value = Remark ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MeetingCompletedDT",
                    Size = 100,
                    Value = MeetingCompletedDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompletedBy",
                    Value = CompletedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RescheduledTimes",
                    Value = RescheduledTimes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OriginalScheduledDate",
                    Size = 100,
                    Value = OriginalScheduledDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NoOfProspects",
                    Value = NoOfProspects ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Deliverables",
                    Size = -1,
                    Value = Deliverables ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Photo",
                    Value = Photo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "MeetingType",
                    Size = -1,
                    Value = MeetingType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_Branding2Result>("EXEC @returnValue = [dbo].[spI_Branding2] @AreaName, @SubAreaName, @ScheduledDate, @ContactPerson, @ContactNumber, @MeetingStatus, @Remark, @MeetingCompletedDT, @CompletedBy, @RescheduledTimes, @OriginalScheduledDate, @NoOfProspects, @Deliverables, @Photo, @MeetingType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_CashFlowResult>> spI_CashFlowAsync(long? CashFlowId, long? CustomerId, double? OpeningBalance, double? CashIncoming, double? Sales, double? AssetSales, double? DebtOrReceipts, double? OtherIncome, double? FamilyIncome, double? TotalIncoming, double? CashOutgoing, double? Purchases, double? AccountantFees, double? SolicitorFees, double? AdvertisingAndMarketing, double? BankFeesAndCharges, double? InterestPaid, double? CreditCardFees, double? Utilities, double? Telephone, double? LeaseOrLoanPayments, double? Rentandrates, double? MotorVehicleExpenses, double? RepairsAndMaintenance, double? StationeryAndPrinting, double? Licensing, double? Insurance, double? Incometax, double? Wages, double? TotalOutgoing, double? ClosingBalance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CashFlowId",
                    Value = CashFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerId",
                    Value = CustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OpeningBalance",
                    Value = OpeningBalance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "CashIncoming",
                    Value = CashIncoming ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Sales",
                    Value = Sales ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "AssetSales",
                    Value = AssetSales ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "DebtOrReceipts",
                    Value = DebtOrReceipts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "OtherIncome",
                    Value = OtherIncome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "FamilyIncome",
                    Value = FamilyIncome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIncoming",
                    Value = TotalIncoming ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "CashOutgoing",
                    Value = CashOutgoing ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Purchases",
                    Value = Purchases ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "AccountantFees",
                    Value = AccountantFees ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "SolicitorFees",
                    Value = SolicitorFees ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "AdvertisingAndMarketing",
                    Value = AdvertisingAndMarketing ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "BankFeesAndCharges",
                    Value = BankFeesAndCharges ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "InterestPaid",
                    Value = InterestPaid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "CreditCardFees",
                    Value = CreditCardFees ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Utilities",
                    Value = Utilities ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Telephone",
                    Value = Telephone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "LeaseOrLoanPayments",
                    Value = LeaseOrLoanPayments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Rentandrates",
                    Value = Rentandrates ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "MotorVehicleExpenses",
                    Value = MotorVehicleExpenses ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "RepairsAndMaintenance",
                    Value = RepairsAndMaintenance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "StationeryAndPrinting",
                    Value = StationeryAndPrinting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Licensing",
                    Value = Licensing ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Insurance",
                    Value = Insurance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Incometax",
                    Value = Incometax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Wages",
                    Value = Wages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "TotalOutgoing",
                    Value = TotalOutgoing ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "ClosingBalance",
                    Value = ClosingBalance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_CashFlowResult>("EXEC @returnValue = [dbo].[spI_CashFlow] @CashFlowId, @CustomerId, @OpeningBalance, @CashIncoming, @Sales, @AssetSales, @DebtOrReceipts, @OtherIncome, @FamilyIncome, @TotalIncoming, @CashOutgoing, @Purchases, @AccountantFees, @SolicitorFees, @AdvertisingAndMarketing, @BankFeesAndCharges, @InterestPaid, @CreditCardFees, @Utilities, @Telephone, @LeaseOrLoanPayments, @Rentandrates, @MotorVehicleExpenses, @RepairsAndMaintenance, @StationeryAndPrinting, @Licensing, @Insurance, @Incometax, @Wages, @TotalOutgoing, @ClosingBalance", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_CenterResult>> spI_CenterAsync(string CenterName, DateTime? MDate, string Description, long? BranchId, long? CreatedBy, long? SurveyInformationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CenterName",
                    Size = 100,
                    Value = CenterName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MDate",
                    Value = MDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 500,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SurveyInformationId",
                    Value = SurveyInformationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_CenterResult>("EXEC @returnValue = [dbo].[spI_Center] @CenterName, @MDate, @Description, @BranchId, @CreatedBy, @SurveyInformationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spI_DeleteAllMeetingParticipantsofMeetingAsync(int? BrandingID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BrandingID",
                    Value = BrandingID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spI_DeleteAllMeetingParticipantsofMeeting] @BrandingID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_FaceTaggingResult>> spI_FaceTaggingAsync(int? FaceTaggingId, int? BranchId, int? AreaId, int? GroupId, int? CustomerId, byte[] CGT1TaggedPhoto, byte[] CGT2TaggedPhoto, byte[] FSAppraisalPhoto, double? CGT1MatchPercentage, double? CGT2MatchPercentage, double? FSAppraisalMatchPercentage, int? FSFaceTaggingStatus, string CreationDateTime, string FSAppraisalDateTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FaceTaggingId",
                    Value = FaceTaggingId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AreaId",
                    Value = AreaId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GroupId",
                    Value = GroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerId",
                    Value = CustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CGT1TaggedPhoto",
                    Value = CGT1TaggedPhoto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "CGT2TaggedPhoto",
                    Value = CGT2TaggedPhoto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "FSAppraisalPhoto",
                    Value = FSAppraisalPhoto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "CGT1MatchPercentage",
                    Value = CGT1MatchPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "CGT2MatchPercentage",
                    Value = CGT2MatchPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "FSAppraisalMatchPercentage",
                    Value = FSAppraisalMatchPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "FSFaceTaggingStatus",
                    Value = FSFaceTaggingStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreationDateTime",
                    Size = 50,
                    Value = CreationDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FSAppraisalDateTime",
                    Size = 50,
                    Value = FSAppraisalDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_FaceTaggingResult>("EXEC @returnValue = [dbo].[spI_FaceTagging] @FaceTaggingId, @BranchId, @AreaId, @GroupId, @CustomerId, @CGT1TaggedPhoto, @CGT2TaggedPhoto, @FSAppraisalPhoto, @CGT1MatchPercentage, @CGT2MatchPercentage, @FSAppraisalMatchPercentage, @FSFaceTaggingStatus, @CreationDateTime, @FSAppraisalDateTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_GetODReportResult>> spI_GetODReportAsync(long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_GetODReportResult>("EXEC @returnValue = [dbo].[spI_GetODReport] @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_GroupResult>> spI_GroupAsync(string GroupName, string ContactPerson, string ContactNo, int? MemberLimit, DateTime? GroupDate, long? BranchId, long? CreatedBy, long? CenterId, string CenterName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "GroupName",
                    Size = 100,
                    Value = GroupName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPerson",
                    Size = 110,
                    Value = ContactPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactNo",
                    Size = 100,
                    Value = ContactNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberLimit",
                    Value = MemberLimit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GroupDate",
                    Value = GroupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CenterId",
                    Value = CenterId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CenterName",
                    Size = 100,
                    Value = CenterName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_GroupResult>("EXEC @returnValue = [dbo].[spI_Group] @GroupName, @ContactPerson, @ContactNo, @MemberLimit, @GroupDate, @BranchId, @CreatedBy, @CenterId, @CenterName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_GroupTrainingProcessResult>> spI_GroupTrainingProcessAsync(long? GroupTrainingProcessId, long? SurveyInformationId, long? AreaId, int? ProcessId, int? DaysId, byte[] DayPhoto, DateTime? ProcessDate, bool? ProcessStatus, long? FieldOfficerId, long? BranchId, int? NoOfCustomer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "GroupTrainingProcessId",
                    Value = GroupTrainingProcessId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SurveyInformationId",
                    Value = SurveyInformationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AreaId",
                    Value = AreaId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessId",
                    Value = ProcessId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DaysId",
                    Value = DaysId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DayPhoto",
                    Value = DayPhoto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessStatus",
                    Value = ProcessStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FieldOfficerId",
                    Value = FieldOfficerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "NoOfCustomer",
                    Value = NoOfCustomer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_GroupTrainingProcessResult>("EXEC @returnValue = [dbo].[spI_GroupTrainingProcess] @GroupTrainingProcessId, @SurveyInformationId, @AreaId, @ProcessId, @DaysId, @DayPhoto, @ProcessDate, @ProcessStatus, @FieldOfficerId, @BranchId, @NoOfCustomer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_GroupTrainingProcess2Result>> spI_GroupTrainingProcess2Async(long? SurveyInformationId, long? AreaId, int? ProcessId, int? DaysId, byte[] DayPhoto, DateTime? ProcessDate, bool? ProcessStatus, long? FieldOfficerId, long? BranchId, int? NoOfCustomer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SurveyInformationId",
                    Value = SurveyInformationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AreaId",
                    Value = AreaId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessId",
                    Value = ProcessId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DaysId",
                    Value = DaysId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DayPhoto",
                    Value = DayPhoto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessStatus",
                    Value = ProcessStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FieldOfficerId",
                    Value = FieldOfficerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "NoOfCustomer",
                    Value = NoOfCustomer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_GroupTrainingProcess2Result>("EXEC @returnValue = [dbo].[spI_GroupTrainingProcess2] @SurveyInformationId, @AreaId, @ProcessId, @DaysId, @DayPhoto, @ProcessDate, @ProcessStatus, @FieldOfficerId, @BranchId, @NoOfCustomer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_LoanTransactionResult>> spI_LoanTransactionAsync(long? CustomerId, double? Amount, DateTime? DepositDate, double? Balance, string TransactionType, string ChequeNo, string BankName, string Remark, double? Principal, double? InterestAmount, double? ODInterestAmount, long? AccountNo, long? CreatedBy, double? SavingAmount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerId",
                    Value = CustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Amount",
                    Value = Amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "DepositDate",
                    Value = DepositDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Balance",
                    Value = Balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "TransactionType",
                    Size = 100,
                    Value = TransactionType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ChequeNo",
                    Size = 100,
                    Value = ChequeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankName",
                    Size = 150,
                    Value = BankName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Remark",
                    Size = 100,
                    Value = Remark ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Principal",
                    Value = Principal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "InterestAmount",
                    Value = InterestAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "ODInterestAmount",
                    Value = ODInterestAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNo",
                    Value = AccountNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SavingAmount",
                    Value = SavingAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_LoanTransactionResult>("EXEC @returnValue = [dbo].[spI_LoanTransaction] @CustomerId, @Amount, @DepositDate, @Balance, @TransactionType, @ChequeNo, @BankName, @Remark, @Principal, @InterestAmount, @ODInterestAmount, @AccountNo, @CreatedBy, @SavingAmount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_MeetingParticipantsResult>> spI_MeetingParticipantsAsync(string ParticipantName, string ParticipantNumber, int? BrandingID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ParticipantName",
                    Size = 100,
                    Value = ParticipantName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ParticipantNumber",
                    Size = 100,
                    Value = ParticipantNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BrandingID",
                    Value = BrandingID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_MeetingParticipantsResult>("EXEC @returnValue = [dbo].[spI_MeetingParticipants] @ParticipantName, @ParticipantNumber, @BrandingID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_SurveyResult>> spI_SurveyAsync(string AreaName, string Description, long? CreatedBy, long? BranchId, DateTime? SurveyDate, double? TotalHouse, double? SCHouse, double? STHouse, double? MinorityHouse, double? OBCHouse, double? TotalArea, double? WaterReservior, double? RainFed, double? ForestLand, double? Irrigated, int? Hotel, int? TeaShop, int? Kirana, int? TailoringShop, int? CycleShop, int? ElectricalRepairAndService, int? Utensil, int? AgriInputShop, int? AgriProcessingUnits, int? PanShop, int? Others, string BusService, string AutoService, string QualityOfRoad, double? PrimarySchoolDistance, string PoliceStation, string PrimaryHealthCareCenter, string PrimarySchool, string Market, int? DairySociety, int? DairySocietyClients, int? FarmerClub, int? FarmerClubClients, int? SHGs, int? SHGsClients, int? CooperativeCreditSociety, int? CooperativeCreditSocietyClient, int? CooperativeBankBranch, int? CooperativeBankBranchClient, int? GrameenBankBranch, int? GrameenBankBranchClient, int? CommercialBankBranch, int? CommercialBankBranchClient, string MFIs1Name, int? MFIs1Number, int? MFIs1Client, string MFIs2Name, int? MFIs2Number, int? MFIs2Client, string MFIs3Name, int? MFIs3Number, int? MFIs3Client, string MFIs4Name, int? MFIs4Number, int? MFIs4Client, string Crop1Name, double? Crop1AcresUnderCultivation, double? Crop1PerAcreYieldInKg, string Crop2Name, double? Crop2AcresUnderCultivation, double? Crop2PerAcreYieldInKg, string Crop3Name, double? Crop3AcresUnderCultivation, double? Crop3PerAcreYieldInKg, string Crop4Name, double? Crop4AcresUnderCultivation, double? Crop4PerAcreYieldInKg, string FOLatitude, string FOLongitude, long? AssignSurveyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AreaName",
                    Size = 100,
                    Value = AreaName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 500,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SurveyDate",
                    Value = SurveyDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TotalHouse",
                    Value = TotalHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "SCHouse",
                    Value = SCHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "STHouse",
                    Value = STHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "MinorityHouse",
                    Value = MinorityHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "OBCHouse",
                    Value = OBCHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "TotalArea",
                    Value = TotalArea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "WaterReservior",
                    Value = WaterReservior ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "RainFed",
                    Value = RainFed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "ForestLand",
                    Value = ForestLand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Irrigated",
                    Value = Irrigated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Hotel",
                    Value = Hotel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TeaShop",
                    Value = TeaShop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Kirana",
                    Value = Kirana ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TailoringShop",
                    Value = TailoringShop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CycleShop",
                    Value = CycleShop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ElectricalRepairAndService",
                    Value = ElectricalRepairAndService ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Utensil",
                    Value = Utensil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AgriInputShop",
                    Value = AgriInputShop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AgriProcessingUnits",
                    Value = AgriProcessingUnits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PanShop",
                    Value = PanShop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Others",
                    Value = Others ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BusService",
                    Size = 100,
                    Value = BusService ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AutoService",
                    Size = 100,
                    Value = AutoService ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "QualityOfRoad",
                    Size = 100,
                    Value = QualityOfRoad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PrimarySchoolDistance",
                    Value = PrimarySchoolDistance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "PoliceStation",
                    Size = 100,
                    Value = PoliceStation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PrimaryHealthCareCenter",
                    Size = 100,
                    Value = PrimaryHealthCareCenter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PrimarySchool",
                    Size = 100,
                    Value = PrimarySchool ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Market",
                    Size = 100,
                    Value = Market ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DairySociety",
                    Value = DairySociety ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DairySocietyClients",
                    Value = DairySocietyClients ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FarmerClub",
                    Value = FarmerClub ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FarmerClubClients",
                    Value = FarmerClubClients ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SHGs",
                    Value = SHGs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SHGsClients",
                    Value = SHGsClients ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CooperativeCreditSociety",
                    Value = CooperativeCreditSociety ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CooperativeCreditSocietyClient",
                    Value = CooperativeCreditSocietyClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CooperativeBankBranch",
                    Value = CooperativeBankBranch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CooperativeBankBranchClient",
                    Value = CooperativeBankBranchClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GrameenBankBranch",
                    Value = GrameenBankBranch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GrameenBankBranchClient",
                    Value = GrameenBankBranchClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CommercialBankBranch",
                    Value = CommercialBankBranch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CommercialBankBranchClient",
                    Value = CommercialBankBranchClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs1Name",
                    Size = 100,
                    Value = MFIs1Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs1Number",
                    Value = MFIs1Number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs1Client",
                    Value = MFIs1Client ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs2Name",
                    Size = 100,
                    Value = MFIs2Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs2Number",
                    Value = MFIs2Number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs2Client",
                    Value = MFIs2Client ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs3Name",
                    Size = 100,
                    Value = MFIs3Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs3Number",
                    Value = MFIs3Number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs3Client",
                    Value = MFIs3Client ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs4Name",
                    Size = 100,
                    Value = MFIs4Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs4Number",
                    Value = MFIs4Number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs4Client",
                    Value = MFIs4Client ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Crop1Name",
                    Size = 100,
                    Value = Crop1Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Crop1AcresUnderCultivation",
                    Value = Crop1AcresUnderCultivation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop1PerAcreYieldInKg",
                    Value = Crop1PerAcreYieldInKg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop2Name",
                    Size = 100,
                    Value = Crop2Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Crop2AcresUnderCultivation",
                    Value = Crop2AcresUnderCultivation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop2PerAcreYieldInKg",
                    Value = Crop2PerAcreYieldInKg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop3Name",
                    Size = 100,
                    Value = Crop3Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Crop3AcresUnderCultivation",
                    Value = Crop3AcresUnderCultivation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop3PerAcreYieldInKg",
                    Value = Crop3PerAcreYieldInKg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop4Name",
                    Size = 100,
                    Value = Crop4Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Crop4AcresUnderCultivation",
                    Value = Crop4AcresUnderCultivation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop4PerAcreYieldInKg",
                    Value = Crop4PerAcreYieldInKg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "FOLatitude",
                    Size = 100,
                    Value = FOLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FOLongitude",
                    Size = 100,
                    Value = FOLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AssignSurveyId",
                    Value = AssignSurveyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_SurveyResult>("EXEC @returnValue = [dbo].[spI_Survey] @AreaName, @Description, @CreatedBy, @BranchId, @SurveyDate, @TotalHouse, @SCHouse, @STHouse, @MinorityHouse, @OBCHouse, @TotalArea, @WaterReservior, @RainFed, @ForestLand, @Irrigated, @Hotel, @TeaShop, @Kirana, @TailoringShop, @CycleShop, @ElectricalRepairAndService, @Utensil, @AgriInputShop, @AgriProcessingUnits, @PanShop, @Others, @BusService, @AutoService, @QualityOfRoad, @PrimarySchoolDistance, @PoliceStation, @PrimaryHealthCareCenter, @PrimarySchool, @Market, @DairySociety, @DairySocietyClients, @FarmerClub, @FarmerClubClients, @SHGs, @SHGsClients, @CooperativeCreditSociety, @CooperativeCreditSocietyClient, @CooperativeBankBranch, @CooperativeBankBranchClient, @GrameenBankBranch, @GrameenBankBranchClient, @CommercialBankBranch, @CommercialBankBranchClient, @MFIs1Name, @MFIs1Number, @MFIs1Client, @MFIs2Name, @MFIs2Number, @MFIs2Client, @MFIs3Name, @MFIs3Number, @MFIs3Client, @MFIs4Name, @MFIs4Number, @MFIs4Client, @Crop1Name, @Crop1AcresUnderCultivation, @Crop1PerAcreYieldInKg, @Crop2Name, @Crop2AcresUnderCultivation, @Crop2PerAcreYieldInKg, @Crop3Name, @Crop3AcresUnderCultivation, @Crop3PerAcreYieldInKg, @Crop4Name, @Crop4AcresUnderCultivation, @Crop4PerAcreYieldInKg, @FOLatitude, @FOLongitude, @AssignSurveyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_syncDataByBEResult>> spI_syncDataByBEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_syncDataByBEResult>("EXEC @returnValue = [dbo].[spI_syncDataByBE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_TrainingAnswersResult>> spI_TrainingAnswersAsync(int? TrainingAnswerId, int? TrainingReportId, int? TrainingQuestionId, string SelectedAnswer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TrainingAnswerId",
                    Value = TrainingAnswerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TrainingReportId",
                    Value = TrainingReportId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TrainingQuestionId",
                    Value = TrainingQuestionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SelectedAnswer",
                    Size = 100,
                    Value = SelectedAnswer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_TrainingAnswersResult>("EXEC @returnValue = [dbo].[spI_TrainingAnswers] @TrainingAnswerId, @TrainingReportId, @TrainingQuestionId, @SelectedAnswer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spI_TrainingReportResult>> spI_TrainingReportAsync(int? TrainingReportID, int? UserId, int? TestId, string TestDateTime, string Result, string Marks, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TrainingReportID",
                    Value = TrainingReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TestId",
                    Value = TestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TestDateTime",
                    Size = 100,
                    Value = TestDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Result",
                    Size = 100,
                    Value = Result ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Marks",
                    Size = 100,
                    Value = Marks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spI_TrainingReportResult>("EXEC @returnValue = [dbo].[spI_TrainingReport] @TrainingReportID, @UserId, @TestId, @TestDateTime, @Result, @Marks", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spIU_MBBResult>> spIU_MBBAsync(long? MBBId, string AreaName, string Name, DateTime? StartDate, string Frequency, string Pincode, string Details, string LatLong, string ExtraField1, string ExtraField2, string ExtraField3, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MBBId",
                    Value = MBBId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AreaName",
                    Size = -1,
                    Value = AreaName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = -1,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Frequency",
                    Size = -1,
                    Value = Frequency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pincode",
                    Size = -1,
                    Value = Pincode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Details",
                    Size = -1,
                    Value = Details ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LatLong",
                    Size = -1,
                    Value = LatLong ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ExtraField1",
                    Size = -1,
                    Value = ExtraField1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ExtraField2",
                    Size = -1,
                    Value = ExtraField2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ExtraField3",
                    Size = -1,
                    Value = ExtraField3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = -1,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spIU_MBBResult>("EXEC @returnValue = [dbo].[spIU_MBB] @MBBId, @AreaName, @Name, @StartDate, @Frequency, @Pincode, @Details, @LatLong, @ExtraField1, @ExtraField2, @ExtraField3, @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spIU_MBBAttendanceResult>> spIU_MBBAttendanceAsync(long? MBBAttendanceId, string AreaName, string MBBName, long? MBBId, DateTime? AttendanceDateTime, long? UserId, string LatLong, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MBBAttendanceId",
                    Value = MBBAttendanceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AreaName",
                    Size = -1,
                    Value = AreaName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MBBName",
                    Size = -1,
                    Value = MBBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MBBId",
                    Value = MBBId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AttendanceDateTime",
                    Value = AttendanceDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LatLong",
                    Size = -1,
                    Value = LatLong ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spIU_MBBAttendanceResult>("EXEC @returnValue = [dbo].[spIU_MBBAttendance] @MBBAttendanceId, @AreaName, @MBBName, @MBBId, @AttendanceDateTime, @UserId, @LatLong", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spl_getContactInfoFromCGroupResult>> spl_getContactInfoFromCGroupAsync(int? AreaId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AreaId",
                    Value = AreaId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spl_getContactInfoFromCGroupResult>("EXEC @returnValue = [dbo].[spl_getContactInfoFromCGroup] @AreaId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spl_InsertAnswerAsync(long? QuestionId, string Question, string Answer, long? UserId, long? CustomerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "QuestionId",
                    Value = QuestionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Question",
                    Size = 500,
                    Value = Question ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Answer",
                    Size = 500,
                    Value = Answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spl_InsertAnswer] @QuestionId, @Question, @Answer, @UserId, @CustomerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spl_InsertOTPtoCGROUPAsync(string ContactPerson, long? OTP, long? AreaId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ContactPerson",
                    Size = 500,
                    Value = ContactPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OTP",
                    Value = OTP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AreaId",
                    Value = AreaId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spl_InsertOTPtoCGROUP] @ContactPerson, @OTP, @AreaId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spl_ResetCGTResult>> spl_ResetCGTAsync(long? areaid, long? userid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "areaid",
                    Value = areaid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "userid",
                    Value = userid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spl_ResetCGTResult>("EXEC @returnValue = [dbo].[spl_ResetCGT] @areaid, @userid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spl_VE_getMobileNoResult>> spl_VE_getMobileNoAsync(long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spl_VE_getMobileNoResult>("EXEC @returnValue = [dbo].[spl_VE_getMobileNo] @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spS_EMICalculationDataByUserResult>> spS_EMICalculationDataByUserAsync(string UserIds, DateTime? CurrentDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserIds",
                    Size = -1,
                    Value = UserIds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentDate",
                    Value = CurrentDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spS_EMICalculationDataByUserResult>("EXEC @returnValue = [dbo].[spS_EMICalculationDataByUser] @UserIds, @CurrentDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spS_FS_EMICalculationDataByUserResult>> spS_FS_EMICalculationDataByUserAsync(string UserIds, DateTime? CurrentDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserIds",
                    Size = -1,
                    Value = UserIds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentDate",
                    Value = CurrentDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spS_FS_EMICalculationDataByUserResult>("EXEC @returnValue = [dbo].[spS_FS_EMICalculationDataByUser] @UserIds, @CurrentDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spS_FS_FaceTaggingResult>> spS_FS_FaceTaggingAsync(int? CustomerId, byte[] FSAppraisalPhoto, string FSAppraisalDateTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerId",
                    Value = CustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FSAppraisalPhoto",
                    Value = FSAppraisalPhoto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "FSAppraisalDateTime",
                    Size = 50,
                    Value = FSAppraisalDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spS_FS_FaceTaggingResult>("EXEC @returnValue = [dbo].[spS_FS_FaceTagging] @CustomerId, @FSAppraisalPhoto, @FSAppraisalDateTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spS_FS_SyncDataByFSAsync(string UserIds, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserIds",
                    Size = -1,
                    Value = UserIds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spS_FS_SyncDataByFS] @UserIds", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spS_SurveyStatusAsync(string SurveyIds, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SurveyIds",
                    Size = -1,
                    Value = SurveyIds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spS_SurveyStatus] @SurveyIds", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spS_SyncDataByUserAsync(string UserIds, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserIds",
                    Size = -1,
                    Value = UserIds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spS_SyncDataByUser] @UserIds", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spS_ValidateLoginResult>> spS_ValidateLoginAsync(string UserName, string Password, long? RoleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 100,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 512,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spS_ValidateLoginResult>("EXEC @returnValue = [dbo].[spS_ValidateLogin] @UserName, @Password, @RoleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spU_FS_VerifyApplicationResult>> spU_FS_VerifyApplicationAsync(long? CustomerId, string Approval, string ManagerRemark, long? ManagerId, DateTime? ManagerDate, byte[] VEBusinessActivity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerId",
                    Value = CustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Approval",
                    Size = 100,
                    Value = Approval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ManagerRemark",
                    Size = 500,
                    Value = ManagerRemark ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ManagerId",
                    Value = ManagerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ManagerDate",
                    Value = ManagerDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VEBusinessActivity",
                    Value = VEBusinessActivity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spU_FS_VerifyApplicationResult>("EXEC @returnValue = [dbo].[spU_FS_VerifyApplication] @CustomerId, @Approval, @ManagerRemark, @ManagerId, @ManagerDate, @VEBusinessActivity", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spU_FS_VerifyCenterResult>> spU_FS_VerifyCenterAsync(long? AreaId, string FSLatitude, string FSLongitude, byte[] FSPic, string Approval, long? ManagerId, DateTime? ManagerDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AreaId",
                    Value = AreaId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FSLatitude",
                    Size = 100,
                    Value = FSLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FSLongitude",
                    Size = 100,
                    Value = FSLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FSPic",
                    Value = FSPic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "Approval",
                    Size = 100,
                    Value = Approval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ManagerId",
                    Value = ManagerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ManagerDate",
                    Value = ManagerDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spU_FS_VerifyCenterResult>("EXEC @returnValue = [dbo].[spU_FS_VerifyCenter] @AreaId, @FSLatitude, @FSLongitude, @FSPic, @Approval, @ManagerId, @ManagerDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spU_FS_VerifyGroupResult>> spU_FS_VerifyGroupAsync(long? GroupId, string Approval, long? ManagerId, DateTime? ManagerDate, long? VerifyOTP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "GroupId",
                    Value = GroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Approval",
                    Size = 100,
                    Value = Approval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ManagerId",
                    Value = ManagerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ManagerDate",
                    Value = ManagerDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VerifyOTP",
                    Value = VerifyOTP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spU_FS_VerifyGroupResult>("EXEC @returnValue = [dbo].[spU_FS_VerifyGroup] @GroupId, @Approval, @ManagerId, @ManagerDate, @VerifyOTP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spU_FS_VerifySurveyResult>> spU_FS_VerifySurveyAsync(long? SurveyInformationId, double? TotalHouse, double? SCHouse, double? STHouse, double? MinorityHouse, double? OBCHouse, double? TotalArea, double? WaterReservior, double? RainFed, double? ForestLand, double? Irrigated, int? Hotel, int? TeaShop, int? Kirana, int? TailoringShop, int? CycleShop, int? ElectricalRepairAndService, int? Utensil, int? AgriInputShop, int? AgriProcessingUnits, int? PanShop, int? Others, string BusService, string AutoService, string QualityOfRoad, double? PrimarySchoolDistance, string PoliceStation, string PrimaryHealthCareCenter, string PrimarySchool, string Market, int? DairySociety, int? DairySocietyClients, int? FarmerClub, int? FarmerClubClients, int? SHGs, int? SHGsClients, int? CooperativeCreditSociety, int? CooperativeCreditSocietyClient, int? CooperativeBankBranch, int? CooperativeBankBranchClient, int? GrameenBankBranch, int? GrameenBankBranchClient, int? CommercialBankBranch, int? CommercialBankBranchClient, string MFIs1Name, int? MFIs1Number, int? MFIs1Client, string MFIs2Name, int? MFIs2Number, int? MFIs2Client, string MFIs3Name, int? MFIs3Number, int? MFIs3Client, string MFIs4Name, int? MFIs4Number, int? MFIs4Client, string Crop1Name, double? Crop1AcresUnderCultivation, double? Crop1PerAcreYieldInKg, string Crop2Name, double? Crop2AcresUnderCultivation, double? Crop2PerAcreYieldInKg, string Crop3Name, double? Crop3AcresUnderCultivation, double? Crop3PerAcreYieldInKg, string Crop4Name, double? Crop4AcresUnderCultivation, double? Crop4PerAcreYieldInKg, string FSLatitude, string FSLongitude, byte[] FSPic, string ManagerApprove, string OpinionKeyperson, long? ManagerId, DateTime? ManagerDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SurveyInformationId",
                    Value = SurveyInformationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TotalHouse",
                    Value = TotalHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "SCHouse",
                    Value = SCHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "STHouse",
                    Value = STHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "MinorityHouse",
                    Value = MinorityHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "OBCHouse",
                    Value = OBCHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "TotalArea",
                    Value = TotalArea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "WaterReservior",
                    Value = WaterReservior ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "RainFed",
                    Value = RainFed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "ForestLand",
                    Value = ForestLand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Irrigated",
                    Value = Irrigated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Hotel",
                    Value = Hotel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TeaShop",
                    Value = TeaShop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Kirana",
                    Value = Kirana ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TailoringShop",
                    Value = TailoringShop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CycleShop",
                    Value = CycleShop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ElectricalRepairAndService",
                    Value = ElectricalRepairAndService ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Utensil",
                    Value = Utensil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AgriInputShop",
                    Value = AgriInputShop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AgriProcessingUnits",
                    Value = AgriProcessingUnits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PanShop",
                    Value = PanShop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Others",
                    Value = Others ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BusService",
                    Size = 100,
                    Value = BusService ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AutoService",
                    Size = 100,
                    Value = AutoService ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "QualityOfRoad",
                    Size = 100,
                    Value = QualityOfRoad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PrimarySchoolDistance",
                    Value = PrimarySchoolDistance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "PoliceStation",
                    Size = 100,
                    Value = PoliceStation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PrimaryHealthCareCenter",
                    Size = 100,
                    Value = PrimaryHealthCareCenter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PrimarySchool",
                    Size = 100,
                    Value = PrimarySchool ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Market",
                    Size = 100,
                    Value = Market ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DairySociety",
                    Value = DairySociety ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DairySocietyClients",
                    Value = DairySocietyClients ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FarmerClub",
                    Value = FarmerClub ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FarmerClubClients",
                    Value = FarmerClubClients ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SHGs",
                    Value = SHGs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SHGsClients",
                    Value = SHGsClients ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CooperativeCreditSociety",
                    Value = CooperativeCreditSociety ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CooperativeCreditSocietyClient",
                    Value = CooperativeCreditSocietyClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CooperativeBankBranch",
                    Value = CooperativeBankBranch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CooperativeBankBranchClient",
                    Value = CooperativeBankBranchClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GrameenBankBranch",
                    Value = GrameenBankBranch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GrameenBankBranchClient",
                    Value = GrameenBankBranchClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CommercialBankBranch",
                    Value = CommercialBankBranch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CommercialBankBranchClient",
                    Value = CommercialBankBranchClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs1Name",
                    Size = 100,
                    Value = MFIs1Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs1Number",
                    Value = MFIs1Number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs1Client",
                    Value = MFIs1Client ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs2Name",
                    Size = 100,
                    Value = MFIs2Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs2Number",
                    Value = MFIs2Number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs2Client",
                    Value = MFIs2Client ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs3Name",
                    Size = 100,
                    Value = MFIs3Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs3Number",
                    Value = MFIs3Number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs3Client",
                    Value = MFIs3Client ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs4Name",
                    Size = 100,
                    Value = MFIs4Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs4Number",
                    Value = MFIs4Number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MFIs4Client",
                    Value = MFIs4Client ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Crop1Name",
                    Size = 100,
                    Value = Crop1Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Crop1AcresUnderCultivation",
                    Value = Crop1AcresUnderCultivation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop1PerAcreYieldInKg",
                    Value = Crop1PerAcreYieldInKg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop2Name",
                    Size = 100,
                    Value = Crop2Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Crop2AcresUnderCultivation",
                    Value = Crop2AcresUnderCultivation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop2PerAcreYieldInKg",
                    Value = Crop2PerAcreYieldInKg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop3Name",
                    Size = 100,
                    Value = Crop3Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Crop3AcresUnderCultivation",
                    Value = Crop3AcresUnderCultivation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop3PerAcreYieldInKg",
                    Value = Crop3PerAcreYieldInKg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop4Name",
                    Size = 100,
                    Value = Crop4Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Crop4AcresUnderCultivation",
                    Value = Crop4AcresUnderCultivation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Crop4PerAcreYieldInKg",
                    Value = Crop4PerAcreYieldInKg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "FSLatitude",
                    Size = 100,
                    Value = FSLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FSLongitude",
                    Size = 100,
                    Value = FSLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FSPic",
                    Value = FSPic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "ManagerApprove",
                    Size = 100,
                    Value = ManagerApprove ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OpinionKeyperson",
                    Size = 500,
                    Value = OpinionKeyperson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ManagerId",
                    Value = ManagerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ManagerDate",
                    Value = ManagerDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spU_FS_VerifySurveyResult>("EXEC @returnValue = [dbo].[spU_FS_VerifySurvey] @SurveyInformationId, @TotalHouse, @SCHouse, @STHouse, @MinorityHouse, @OBCHouse, @TotalArea, @WaterReservior, @RainFed, @ForestLand, @Irrigated, @Hotel, @TeaShop, @Kirana, @TailoringShop, @CycleShop, @ElectricalRepairAndService, @Utensil, @AgriInputShop, @AgriProcessingUnits, @PanShop, @Others, @BusService, @AutoService, @QualityOfRoad, @PrimarySchoolDistance, @PoliceStation, @PrimaryHealthCareCenter, @PrimarySchool, @Market, @DairySociety, @DairySocietyClients, @FarmerClub, @FarmerClubClients, @SHGs, @SHGsClients, @CooperativeCreditSociety, @CooperativeCreditSocietyClient, @CooperativeBankBranch, @CooperativeBankBranchClient, @GrameenBankBranch, @GrameenBankBranchClient, @CommercialBankBranch, @CommercialBankBranchClient, @MFIs1Name, @MFIs1Number, @MFIs1Client, @MFIs2Name, @MFIs2Number, @MFIs2Client, @MFIs3Name, @MFIs3Number, @MFIs3Client, @MFIs4Name, @MFIs4Number, @MFIs4Client, @Crop1Name, @Crop1AcresUnderCultivation, @Crop1PerAcreYieldInKg, @Crop2Name, @Crop2AcresUnderCultivation, @Crop2PerAcreYieldInKg, @Crop3Name, @Crop3AcresUnderCultivation, @Crop3PerAcreYieldInKg, @Crop4Name, @Crop4AcresUnderCultivation, @Crop4PerAcreYieldInKg, @FSLatitude, @FSLongitude, @FSPic, @ManagerApprove, @OpinionKeyperson, @ManagerId, @ManagerDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spU_QuestionsAsync(long? QuestionId, string Question, bool? IsActive, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "QuestionId",
                    Value = QuestionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Question",
                    Size = -1,
                    Value = Question ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = IsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spU_Questions] @QuestionId, @Question, @IsActive", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> totalemiAsync(long? CustomerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[totalemi] @CustomerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updatesurveyAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updatesurvey]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> VerifyAccAsync(long? CustomerID, long? AccountNo, long? SavingAccountNo, long? Branchid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNo",
                    Value = AccountNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SavingAccountNo",
                    Value = SavingAccountNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Branchid",
                    Value = Branchid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[VerifyAcc] @CustomerID, @AccountNo, @SavingAccountNo, @Branchid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> VerifyAccountAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[VerifyAccount]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
