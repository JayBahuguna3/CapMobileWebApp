// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using CapMobileWebApp.DAL.Model;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace CapMobileWebApp.DAL.Context
{
    public partial interface ICapRetailContextProcedures
    {
        Task<int> addaccAsync(long? cid, string status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> ApproveTransactionAsync(long? transactionid, string status, long? TEID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> AssignAreaToTEAsync(long? NewFieldOfficer, long? AssignedBy, long? SurveyInformationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> AssignBEtoFOAsync(long? BEid, long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> ChangeportfolioAsync(long? oldid, long? UserId, long? BranchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> DataCorrectionPartialAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<DataCorrectionSpecialCaseResult>> DataCorrectionSpecialCaseAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> ExportTrainingReportAsync(long? TestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> FebCollFixAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<getAssignedAreasResult>> getAssignedAreasAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<GetDashboardGraphResult>> GetDashboardGraphAsync(long? BranchId, long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<GetDelayedProcessResult>> GetDelayedProcessAsync(long? BranchId, long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<GetManagerDashBoardDataResult>> GetManagerDashBoardDataAsync(long? BranchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<GetManagerDashBoardDataTestJvResult>> GetManagerDashBoardDataTestJvAsync(long? BranchIdParm, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<getPotentialResult>> getPotentialAsync(string SurveyArea, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<getrecordsemp1Result>> getrecordsemp1Async(DateTime? startdate, DateTime? enddate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> MoveCustomerToBlcAsync(long? BranchId, long? CenterId, long? GroupId, long? CustomerId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> ODinterestCorrectionAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> SaveCreditBureauInfoAsync(int? CustomerId, string ReferenceId, DateTime? CreatedDate, int? CreatedBy, bool? IsActive, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> SD_AddBranchAsync(long? BranchId, string BranchName, string BranchAddress, string BranchCity, string BranchState, string BranchCode, DateTime? bdate, bool? Active, string LatLong, string Latitude, string Longitude, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> SD_DeleteAsync(int? RoleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> SD_InsertAsync(int? RoleId, string RoleName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<SD_SelectResult>> SD_SelectAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> SD_UpdateAsync(int? RoleId, string RoleName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<SelectRoleResult>> SelectRoleAsync(int? RoleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_getPendencyReportResult>> sp_getPendencyReportAsync(int? userid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetTrainingTestResult>> sp_GetTrainingTestAsync(long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_VE_SyncDataByVEAsync(string UserIds, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_AddQuestionsResult>> spI_AddQuestionsAsync(string Question, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_ApplicationResult>> spI_ApplicationAsync(long? CustomerId, string CustomerName, DateTime? AccountDate, string ResAddress, string OffAddress, string TelPhoneNo, string MobileNo, string PhotoIdentityNumber, string PanCardNo, DateTime? BirthDate, int? Age, long? ActiveBy, string City, string MState, string EmailID, int? PinCode, byte[] PhotoId, byte[] Mphoto, string IdType, long? GroupId, string GroupName, string CenterName, long? BranchId, double? PrpoposedLoanAmount, long? LoanTypeId, string LoanCycleNo, string MartialStatus, string SpouseName, DateTime? SpouseDOB, string NomineeName, string NomineeAge, string NomineeRelation, string Religion, string Caste, string Gender, string ApplicantFather, string FamilyDetails, string FamilyRelation, string RationCardNo, string VoterIdCardNo, string UidNo, string LoanPurpose, byte[] IDProof1, byte[] IDProof2, byte[] CustomerSign, string FamilyDetails2, string FamilyRelation2, string FamilyDetails3, string FamilyRelation3, string FamilyDetails4, string FamilyRelation4, string ManagerApproval, string ManagerRemark, byte[] TEBusinessActivity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_BrandingResult>> spI_BrandingAsync(int? id, string AreaName, string SubAreaName, string ScheduledDate, string ScheduledTime, string ContactPerson, string ContactNumber, string MeetingStatus, string Remark, string MeetingCompletedDT, int? CompletedBy, int? RescheduledTimes, string OriginalScheduledDate, int? NoOfProspects, string Deliverables, byte[] Photo, string MeetingType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_Branding2Result>> spI_Branding2Async(string AreaName, string SubAreaName, string ScheduledDate, string ContactPerson, string ContactNumber, string MeetingStatus, string Remark, string MeetingCompletedDT, int? CompletedBy, int? RescheduledTimes, string OriginalScheduledDate, int? NoOfProspects, string Deliverables, byte[] Photo, string MeetingType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_CashFlowResult>> spI_CashFlowAsync(long? CashFlowId, long? CustomerId, double? OpeningBalance, double? CashIncoming, double? Sales, double? AssetSales, double? DebtOrReceipts, double? OtherIncome, double? FamilyIncome, double? TotalIncoming, double? CashOutgoing, double? Purchases, double? AccountantFees, double? SolicitorFees, double? AdvertisingAndMarketing, double? BankFeesAndCharges, double? InterestPaid, double? CreditCardFees, double? Utilities, double? Telephone, double? LeaseOrLoanPayments, double? Rentandrates, double? MotorVehicleExpenses, double? RepairsAndMaintenance, double? StationeryAndPrinting, double? Licensing, double? Insurance, double? Incometax, double? Wages, double? TotalOutgoing, double? ClosingBalance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_CenterResult>> spI_CenterAsync(string CenterName, DateTime? MDate, string Description, long? BranchId, long? CreatedBy, long? SurveyInformationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> spI_DeleteAllMeetingParticipantsofMeetingAsync(int? BrandingID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_FaceTaggingResult>> spI_FaceTaggingAsync(int? FaceTaggingId, int? BranchId, int? AreaId, int? GroupId, int? CustomerId, byte[] CGT1TaggedPhoto, byte[] CGT2TaggedPhoto, byte[] FSAppraisalPhoto, double? CGT1MatchPercentage, double? CGT2MatchPercentage, double? FSAppraisalMatchPercentage, int? FSFaceTaggingStatus, string CreationDateTime, string FSAppraisalDateTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_GetODReportResult>> spI_GetODReportAsync(long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_GroupResult>> spI_GroupAsync(string GroupName, string ContactPerson, string ContactNo, int? MemberLimit, DateTime? GroupDate, long? BranchId, long? CreatedBy, long? CenterId, string CenterName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_GroupTrainingProcessResult>> spI_GroupTrainingProcessAsync(long? GroupTrainingProcessId, long? SurveyInformationId, long? AreaId, int? ProcessId, int? DaysId, byte[] DayPhoto, DateTime? ProcessDate, bool? ProcessStatus, long? FieldOfficerId, long? BranchId, int? NoOfCustomer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_GroupTrainingProcess2Result>> spI_GroupTrainingProcess2Async(long? SurveyInformationId, long? AreaId, int? ProcessId, int? DaysId, byte[] DayPhoto, DateTime? ProcessDate, bool? ProcessStatus, long? FieldOfficerId, long? BranchId, int? NoOfCustomer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_LoanTransactionResult>> spI_LoanTransactionAsync(long? CustomerId, double? Amount, DateTime? DepositDate, double? Balance, string TransactionType, string ChequeNo, string BankName, string Remark, double? Principal, double? InterestAmount, double? ODInterestAmount, long? AccountNo, long? CreatedBy, double? SavingAmount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_MeetingParticipantsResult>> spI_MeetingParticipantsAsync(string ParticipantName, string ParticipantNumber, int? BrandingID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_SurveyResult>> spI_SurveyAsync(string AreaName, string Description, long? CreatedBy, long? BranchId, DateTime? SurveyDate, double? TotalHouse, double? SCHouse, double? STHouse, double? MinorityHouse, double? OBCHouse, double? TotalArea, double? WaterReservior, double? RainFed, double? ForestLand, double? Irrigated, int? Hotel, int? TeaShop, int? Kirana, int? TailoringShop, int? CycleShop, int? ElectricalRepairAndService, int? Utensil, int? AgriInputShop, int? AgriProcessingUnits, int? PanShop, int? Others, string BusService, string AutoService, string QualityOfRoad, double? PrimarySchoolDistance, string PoliceStation, string PrimaryHealthCareCenter, string PrimarySchool, string Market, int? DairySociety, int? DairySocietyClients, int? FarmerClub, int? FarmerClubClients, int? SHGs, int? SHGsClients, int? CooperativeCreditSociety, int? CooperativeCreditSocietyClient, int? CooperativeBankBranch, int? CooperativeBankBranchClient, int? GrameenBankBranch, int? GrameenBankBranchClient, int? CommercialBankBranch, int? CommercialBankBranchClient, string MFIs1Name, int? MFIs1Number, int? MFIs1Client, string MFIs2Name, int? MFIs2Number, int? MFIs2Client, string MFIs3Name, int? MFIs3Number, int? MFIs3Client, string MFIs4Name, int? MFIs4Number, int? MFIs4Client, string Crop1Name, double? Crop1AcresUnderCultivation, double? Crop1PerAcreYieldInKg, string Crop2Name, double? Crop2AcresUnderCultivation, double? Crop2PerAcreYieldInKg, string Crop3Name, double? Crop3AcresUnderCultivation, double? Crop3PerAcreYieldInKg, string Crop4Name, double? Crop4AcresUnderCultivation, double? Crop4PerAcreYieldInKg, string FOLatitude, string FOLongitude, long? AssignSurveyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_syncDataByBEResult>> spI_syncDataByBEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_TrainingAnswersResult>> spI_TrainingAnswersAsync(int? TrainingAnswerId, int? TrainingReportId, int? TrainingQuestionId, string SelectedAnswer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spI_TrainingReportResult>> spI_TrainingReportAsync(int? TrainingReportID, int? UserId, int? TestId, string TestDateTime, string Result, string Marks, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spIU_MBBResult>> spIU_MBBAsync(long? MBBId, string AreaName, string Name, DateTime? StartDate, string Frequency, string Pincode, string Details, string LatLong, string ExtraField1, string ExtraField2, string ExtraField3, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spIU_MBBAttendanceResult>> spIU_MBBAttendanceAsync(long? MBBAttendanceId, string AreaName, string MBBName, long? MBBId, DateTime? AttendanceDateTime, long? UserId, string LatLong, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spl_getContactInfoFromCGroupResult>> spl_getContactInfoFromCGroupAsync(int? AreaId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> spl_InsertAnswerAsync(long? QuestionId, string Question, string Answer, long? UserId, long? CustomerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> spl_InsertOTPtoCGROUPAsync(string ContactPerson, long? OTP, long? AreaId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spl_ResetCGTResult>> spl_ResetCGTAsync(long? areaid, long? userid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spl_VE_getMobileNoResult>> spl_VE_getMobileNoAsync(long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spS_EMICalculationDataByUserResult>> spS_EMICalculationDataByUserAsync(string UserIds, DateTime? CurrentDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spS_FS_EMICalculationDataByUserResult>> spS_FS_EMICalculationDataByUserAsync(string UserIds, DateTime? CurrentDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spS_FS_FaceTaggingResult>> spS_FS_FaceTaggingAsync(int? CustomerId, byte[] FSAppraisalPhoto, string FSAppraisalDateTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> spS_FS_SyncDataByFSAsync(string UserIds, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> spS_SurveyStatusAsync(string SurveyIds, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> spS_SyncDataByUserAsync(string UserIds, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spS_ValidateLoginResult>> spS_ValidateLoginAsync(string UserName, string Password, long? RoleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spU_FS_VerifyApplicationResult>> spU_FS_VerifyApplicationAsync(long? CustomerId, string Approval, string ManagerRemark, long? ManagerId, DateTime? ManagerDate, byte[] VEBusinessActivity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spU_FS_VerifyCenterResult>> spU_FS_VerifyCenterAsync(long? AreaId, string FSLatitude, string FSLongitude, byte[] FSPic, string Approval, long? ManagerId, DateTime? ManagerDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spU_FS_VerifyGroupResult>> spU_FS_VerifyGroupAsync(long? GroupId, string Approval, long? ManagerId, DateTime? ManagerDate, long? VerifyOTP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<spU_FS_VerifySurveyResult>> spU_FS_VerifySurveyAsync(long? SurveyInformationId, double? TotalHouse, double? SCHouse, double? STHouse, double? MinorityHouse, double? OBCHouse, double? TotalArea, double? WaterReservior, double? RainFed, double? ForestLand, double? Irrigated, int? Hotel, int? TeaShop, int? Kirana, int? TailoringShop, int? CycleShop, int? ElectricalRepairAndService, int? Utensil, int? AgriInputShop, int? AgriProcessingUnits, int? PanShop, int? Others, string BusService, string AutoService, string QualityOfRoad, double? PrimarySchoolDistance, string PoliceStation, string PrimaryHealthCareCenter, string PrimarySchool, string Market, int? DairySociety, int? DairySocietyClients, int? FarmerClub, int? FarmerClubClients, int? SHGs, int? SHGsClients, int? CooperativeCreditSociety, int? CooperativeCreditSocietyClient, int? CooperativeBankBranch, int? CooperativeBankBranchClient, int? GrameenBankBranch, int? GrameenBankBranchClient, int? CommercialBankBranch, int? CommercialBankBranchClient, string MFIs1Name, int? MFIs1Number, int? MFIs1Client, string MFIs2Name, int? MFIs2Number, int? MFIs2Client, string MFIs3Name, int? MFIs3Number, int? MFIs3Client, string MFIs4Name, int? MFIs4Number, int? MFIs4Client, string Crop1Name, double? Crop1AcresUnderCultivation, double? Crop1PerAcreYieldInKg, string Crop2Name, double? Crop2AcresUnderCultivation, double? Crop2PerAcreYieldInKg, string Crop3Name, double? Crop3AcresUnderCultivation, double? Crop3PerAcreYieldInKg, string Crop4Name, double? Crop4AcresUnderCultivation, double? Crop4PerAcreYieldInKg, string FSLatitude, string FSLongitude, byte[] FSPic, string ManagerApprove, string OpinionKeyperson, long? ManagerId, DateTime? ManagerDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> spU_QuestionsAsync(long? QuestionId, string Question, bool? IsActive, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> totalemiAsync(long? CustomerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> updatesurveyAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> VerifyAccAsync(long? CustomerID, long? AccountNo, long? SavingAccountNo, long? Branchid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> VerifyAccountAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
    }
}
