// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using CapMobileWebApp.DAL.Model;

namespace CapMobileWebApp.DAL.Context
{
    public partial class CapRetailContext : DbContext
    {
        public CapRetailContext()
        {
        }

        public CapRetailContext(DbContextOptions<CapRetailContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Area> Area { get; set; }
        public virtual DbSet<AreaTransferredToTe> AreaTransferredToTe { get; set; }
        public virtual DbSet<Asset> Asset { get; set; }
        public virtual DbSet<AssignBranch> AssignBranch { get; set; }
        public virtual DbSet<AssignSurvey> AssignSurvey { get; set; }
        public virtual DbSet<Branch> Branch { get; set; }
        public virtual DbSet<BranchTarget> BranchTarget { get; set; }
        public virtual DbSet<Branding> Branding { get; set; }
        public virtual DbSet<CashFlow> CashFlow { get; set; }
        public virtual DbSet<CashFlowBusiness> CashFlowBusiness { get; set; }
        public virtual DbSet<CashFlowSalary> CashFlowSalary { get; set; }
        public virtual DbSet<Cgroup> Cgroup { get; set; }
        public virtual DbSet<ChangeOfficerLog> ChangeOfficerLog { get; set; }
        public virtual DbSet<CompanySetup> CompanySetup { get; set; }
        public virtual DbSet<CreditBureauInfo> CreditBureauInfo { get; set; }
        public virtual DbSet<Creditpointreport> Creditpointreport { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<CustomerDetails> CustomerDetails { get; set; }
        public virtual DbSet<CustomerTransfer> CustomerTransfer { get; set; }
        public virtual DbSet<Day> Day { get; set; }
        public virtual DbSet<Disbursement> Disbursement { get; set; }
        public virtual DbSet<Emiinstallments> Emiinstallments { get; set; }
        public virtual DbSet<FaceTagging> FaceTagging { get; set; }
        public virtual DbSet<GlinstallmentOtp> GlinstallmentOtp { get; set; }
        public virtual DbSet<GroupMember> GroupMember { get; set; }
        public virtual DbSet<GroupTrainingProcess> GroupTrainingProcess { get; set; }
        public virtual DbSet<ImportwithAccount> ImportwithAccount { get; set; }
        public virtual DbSet<LoanAccount> LoanAccount { get; set; }
        public virtual DbSet<LoanApplicant> LoanApplicant { get; set; }
        public virtual DbSet<LoanApplication> LoanApplication { get; set; }
        public virtual DbSet<LoanTransaction> LoanTransaction { get; set; }
        public virtual DbSet<LoanType> LoanType { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<LogTransaction> LogTransaction { get; set; }
        public virtual DbSet<Mbb> Mbb { get; set; }
        public virtual DbSet<Mbbattendance> Mbbattendance { get; set; }
        public virtual DbSet<MeetingParticipants> MeetingParticipants { get; set; }
        public virtual DbSet<MemberLimit> MemberLimit { get; set; }
        public virtual DbSet<Process> Process { get; set; }
        public virtual DbSet<Question> Question { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<SavingAccount> SavingAccount { get; set; }
        public virtual DbSet<SavingTransaction> SavingTransaction { get; set; }
        public virtual DbSet<SecurityAnswers> SecurityAnswers { get; set; }
        public virtual DbSet<SecurityQuestions> SecurityQuestions { get; set; }
        public virtual DbSet<Sms> Sms { get; set; }
        public virtual DbSet<SubmittedCollectionAmount> SubmittedCollectionAmount { get; set; }
        public virtual DbSet<Survey> Survey { get; set; }
        public virtual DbSet<SurveyInfo> SurveyInfo { get; set; }
        public virtual DbSet<SurveyInformation> SurveyInformation { get; set; }
        public virtual DbSet<TrainingAnswers> TrainingAnswers { get; set; }
        public virtual DbSet<TrainingQuestions> TrainingQuestions { get; set; }
        public virtual DbSet<TrainingReport> TrainingReport { get; set; }
        public virtual DbSet<TrainingTest> TrainingTest { get; set; }
        public virtual DbSet<UserInfo> UserInfo { get; set; }
        public virtual DbSet<UserTarget> UserTarget { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=49.50.78.108;Initial Catalog=CapRetail;Persist Security Info=True;User ID=samtatest;Password=Samata@65#678");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Area>(entity =>
            {
                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.AreaName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Csrapprove)
                    .HasMaxLength(50)
                    .HasColumnName("CSRApprove")
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.Csrdate)
                    .HasColumnType("date")
                    .HasColumnName("CSRdate");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Dveapproval)
                    .HasMaxLength(50)
                    .HasColumnName("DVEApproval")
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.DveapprovalDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("DVEApprovalDateTime");

                entity.Property(e => e.Fslatitude)
                    .HasMaxLength(50)
                    .HasColumnName("FSLatitude");

                entity.Property(e => e.Fslongitude)
                    .HasMaxLength(50)
                    .HasColumnName("FSLongitude");

                entity.Property(e => e.Fspic)
                    .HasColumnType("image")
                    .HasColumnName("FSPic");

                entity.Property(e => e.IsTopupLoan).HasDefaultValueSql("((0))");

                entity.Property(e => e.Latitude).HasMaxLength(50);

                entity.Property(e => e.Longitude).HasMaxLength(50);

                entity.Property(e => e.Mangerdate).HasColumnType("date");

                entity.Property(e => e.Mdate).HasColumnType("date");

                entity.Property(e => e.Noofgroup)
                    .HasColumnName("noofgroup")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OfficerChangeDate).HasColumnType("datetime");

                entity.Property(e => e.OtpBlc)
                    .HasMaxLength(50)
                    .HasColumnName("otpBLC");

                entity.Property(e => e.VerifyOtpBlc)
                    .HasMaxLength(50)
                    .HasColumnName("verifyOtpBLC");
            });

            modelBuilder.Entity<AreaTransferredToTe>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AreaTransferredToTE");

                entity.Property(e => e.Createddate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Asset>(entity =>
            {
                entity.Property(e => e.AssetId).HasColumnName("AssetID");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AssignBranch>(entity =>
            {
                entity.HasKey(e => e.AssignBrMapid);
            });

            modelBuilder.Entity<AssignSurvey>(entity =>
            {
                entity.Property(e => e.AreaLatitude).HasMaxLength(50);

                entity.Property(e => e.AreaLongitude).HasMaxLength(50);

                entity.Property(e => e.AreaName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Branch>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.Bdate)
                    .HasColumnType("datetime")
                    .HasColumnName("bdate");

                entity.Property(e => e.BranchAddress).IsRequired();

                entity.Property(e => e.BranchCity)
                    .IsRequired()
                    .HasMaxLength(55);

                entity.Property(e => e.BranchCode).HasMaxLength(50);

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(105);

                entity.Property(e => e.BranchState)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LatLong).HasMaxLength(50);

                entity.Property(e => e.Latitude).HasMaxLength(255);

                entity.Property(e => e.Longitude).HasMaxLength(255);
            });

            modelBuilder.Entity<BranchTarget>(entity =>
            {
                entity.Property(e => e.AssignMonth).HasColumnType("date");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Branding>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ContactNumber)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.ContactPerson).IsRequired();

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MeetingCompletedDt)
                    .HasMaxLength(50)
                    .HasColumnName("MeetingCompletedDT");

                entity.Property(e => e.MeetingStatus)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.OriginalScheduledDate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ScheduledDate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ScheduledTime)
                    .HasMaxLength(10)
                    .HasColumnName("scheduledTime");

                entity.Property(e => e.SubAreaName).IsRequired();
            });

            modelBuilder.Entity<CashFlow>(entity =>
            {
                entity.Property(e => e.CashflowId).HasColumnName("cashflowId");

                entity.Property(e => e.Accountantfees).HasDefaultValueSql("((0))");

                entity.Property(e => e.Advertisingandmarketing).HasDefaultValueSql("((0))");

                entity.Property(e => e.Assetsales).HasDefaultValueSql("((0))");

                entity.Property(e => e.Bankfeesandcharges).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashincoming).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashoutgoing).HasDefaultValueSql("((0))");

                entity.Property(e => e.Closingbalance).HasDefaultValueSql("((0))");

                entity.Property(e => e.Creditcardfees).HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Debtorreceipts).HasDefaultValueSql("((0))");

                entity.Property(e => e.Dth).HasColumnName("DTH");

                entity.Property(e => e.Incometax).HasDefaultValueSql("((0))");

                entity.Property(e => e.Insurance).HasDefaultValueSql("((0))");

                entity.Property(e => e.Interestpaid).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsTopupLoan).HasDefaultValueSql("((0))");

                entity.Property(e => e.Leaseorloanpayments).HasDefaultValueSql("((0))");

                entity.Property(e => e.Licensing).HasDefaultValueSql("((0))");

                entity.Property(e => e.LoanEmi).HasColumnName("LoanEMI");

                entity.Property(e => e.Motorvehicleexpenses).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpeningBalance).HasDefaultValueSql("((0))");

                entity.Property(e => e.Otherincome).HasDefaultValueSql("((0))");

                entity.Property(e => e.Rentandrates).HasDefaultValueSql("((0))");

                entity.Property(e => e.Repairsandmaintenance).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sip).HasColumnName("SIP");

                entity.Property(e => e.Solicitorfees).HasDefaultValueSql("((0))");

                entity.Property(e => e.Stationeryandprinting).HasDefaultValueSql("((0))");

                entity.Property(e => e.Telephone).HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalincoming).HasDefaultValueSql("((0))");

                entity.Property(e => e.Totaloutgoing).HasDefaultValueSql("((0))");

                entity.Property(e => e.Utilities).HasDefaultValueSql("((0))");

                entity.Property(e => e.Wages).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CashFlowBusiness>(entity =>
            {
                entity.Property(e => e.ElectricityBill).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.GeneralAndAdministrative).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IncomingCash).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IncomingReceivables).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IncomingSales).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Insurance).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Internet).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.LoanEmi)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("LoanEMI");

                entity.Property(e => e.MarketingExp).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MaterialPurchase).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MedicalExp).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MiscellaneousExp).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MotorFuelExpenses).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MotorMaintenanceExp).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.OtherIncome).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.PhoneBills).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Rent).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.SalariesAndWages).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Taxes).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.TotalIncome).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.TotalOutgoing).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.TransportationExpenses).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Utility).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CashFlowBusiness)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CashFlowBusiness_Customer");
            });

            modelBuilder.Entity<CashFlowSalary>(entity =>
            {
                entity.Property(e => e.CarInsurance).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.CookingGas).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Dth)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("DTH");

                entity.Property(e => e.EducationalFees).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ElectricityBill).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Fuel).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.FunctionCelebration).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.GroceryAndVegetable).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Internet).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.LoanEmi)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("LoanEMI");

                entity.Property(e => e.Maid).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MedicalExpenses).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Milk).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MonthlyIncome).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.OtherExpenses).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.OtherFamilyMemberIncome).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.OtherIncome).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.PersonalInsurance).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.PhoneBill).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.PropertyTax).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Rent).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Sip)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("SIP");

                entity.Property(e => e.SpouseIncome).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.TotalIncome).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.TotalOutgoing).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.TutionFees).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.VehicleMaintenance).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CashFlowSalary)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CashFlowSalary_CashFlowSalary");
            });

            modelBuilder.Entity<Cgroup>(entity =>
            {
                entity.HasKey(e => e.GroupId)
                    .HasName("PK_Group");

                entity.ToTable("CGroup");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.ContactPerson).HasMaxLength(55);

                entity.Property(e => e.Contactno).HasMaxLength(50);

                entity.Property(e => e.Csrapprove)
                    .HasMaxLength(50)
                    .HasColumnName("CSRApprove")
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.Csrdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CSRdate");

                entity.Property(e => e.CurrentNoofMember).HasDefaultValueSql("((0))");

                entity.Property(e => e.DvegroupApproval)
                    .HasMaxLength(50)
                    .HasColumnName("DVEGroupApproval")
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.DvegroupApprovalDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("DVEGroupApprovalDateTime");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Groupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("groupdate");

                entity.Property(e => e.IsTopupLoan).HasDefaultValueSql("((0))");

                entity.Property(e => e.Mangerdate).HasColumnType("datetime");

                entity.Property(e => e.OfficerChangeDate).HasColumnType("datetime");

                entity.Property(e => e.Otp).HasColumnName("OTP");

                entity.Property(e => e.PanCardNumber).HasMaxLength(50);

                entity.Property(e => e.VerifyOtp).HasColumnName("VerifyOTP");
            });

            modelBuilder.Entity<ChangeOfficerLog>(entity =>
            {
                entity.Property(e => e.ChangeDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CompanySetup>(entity =>
            {
                entity.ToTable("companySetup");

                entity.Property(e => e.CompanyAddress).HasMaxLength(255);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Companylogo)
                    .HasColumnType("image")
                    .HasColumnName("companylogo");

                entity.Property(e => e.Phoneno).HasColumnName("phoneno");

                entity.Property(e => e.Registrationno)
                    .HasMaxLength(101)
                    .HasColumnName("registrationno");
            });

            modelBuilder.Entity<CreditBureauInfo>(entity =>
            {
                entity.HasKey(e => e.CreditBureauId);

                entity.Property(e => e.CreditBureauId).HasColumnName("CreditBureauID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ReferenceId)
                    .IsRequired()
                    .HasColumnName("ReferenceID");
            });

            modelBuilder.Entity<Creditpointreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("creditpointreport");

                entity.Property(e => e.BranchName).HasMaxLength(255);

                entity.Property(e => e.CenterName).HasMaxLength(255);

                entity.Property(e => e.Csrcode).HasColumnName("CSRCode");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerName).HasMaxLength(255);

                entity.Property(e => e.GroupName).HasMaxLength(255);

                entity.Property(e => e.LoanCycleNo).HasMaxLength(255);

                entity.Property(e => e.MartialStatus).HasMaxLength(255);

                entity.Property(e => e.NomineeAge).HasMaxLength(255);

                entity.Property(e => e.NomineeName).HasMaxLength(255);

                entity.Property(e => e.NomineeRelation).HasMaxLength(255);

                entity.Property(e => e.Reason).HasMaxLength(255);

                entity.Property(e => e.SpouseDob)
                    .HasMaxLength(255)
                    .HasColumnName("SpouseDOB");

                entity.Property(e => e.SpouseName).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasIndex(e => e.BranchId, "Customer_BranchId");

                entity.HasIndex(e => e.EmailId, "Customer_EmailID");

                entity.HasIndex(e => e.GroupId, "Customer_GroupId");

                entity.HasIndex(e => e.ManagerId, "Customer_ManagerId");

                entity.HasIndex(e => e.MobileNo, "Customer_MobileNo");

                entity.HasIndex(e => e.Uidno, "Customer_Uidno");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.AccountDate).HasColumnType("date");

                entity.Property(e => e.ApplicantFather).HasMaxLength(50);

                entity.Property(e => e.ApplicantName).HasMaxLength(50);

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.Caste).HasMaxLength(50);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Csrapprove)
                    .HasMaxLength(50)
                    .HasColumnName("CSRApprove")
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.Csrdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CSRdate");

                entity.Property(e => e.Csrremark)
                    .HasMaxLength(250)
                    .HasColumnName("CSRRemark");

                entity.Property(e => e.CustomerAadharAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerCurrentAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDistrict)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDrivingLicNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerEducation)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerGender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerLat).HasColumnType("decimal(20, 10)");

                entity.Property(e => e.CustomerLoanApplicationDate).HasColumnType("date");

                entity.Property(e => e.CustomerLoanType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerLong).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(55);

                entity.Property(e => e.CustomerSign).HasColumnType("image");

                entity.Property(e => e.CustomerTaluka)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerVillage)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DvecustomerApproval)
                    .HasMaxLength(50)
                    .HasColumnName("DVECustomerApproval")
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.DvecustomerApprovalDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("DVECustomerApprovalDateTime");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EmailID");

                entity.Property(e => e.ExActiveCustId).HasMaxLength(55);

                entity.Property(e => e.FamilyDetails).HasMaxLength(50);

                entity.Property(e => e.FamilyDetails2).HasMaxLength(50);

                entity.Property(e => e.FamilyDetails3).HasMaxLength(50);

                entity.Property(e => e.FamilyDetails4).HasMaxLength(50);

                entity.Property(e => e.FamilyRelation).HasMaxLength(50);

                entity.Property(e => e.FamilyRelation2).HasMaxLength(50);

                entity.Property(e => e.FamilyRelation3).HasMaxLength(50);

                entity.Property(e => e.FamilyRelation4).HasMaxLength(50);

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.GuarantorAddress)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GuarantorCompanyName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GuarantorDob)
                    .HasColumnType("date")
                    .HasColumnName("GuarantorDOB");

                entity.Property(e => e.GuarantorGender)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.GuarantorMobileNo)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.GuarantorName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GuarantorPhoto).HasColumnType("image");

                entity.Property(e => e.GuarantorSalary).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Idproof1)
                    .HasColumnType("image")
                    .HasColumnName("IDProof1");

                entity.Property(e => e.Idproof2)
                    .HasColumnType("image")
                    .HasColumnName("IDProof2");

                entity.Property(e => e.Idtype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("idtype");

                entity.Property(e => e.IsExistingLoanClose).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsReLoan).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsTopupLoan).HasDefaultValueSql("((0))");

                entity.Property(e => e.LoanCycleNo).HasMaxLength(50);

                entity.Property(e => e.LoanPurpose).HasMaxLength(50);

                entity.Property(e => e.Mangerdate).HasColumnType("datetime");

                entity.Property(e => e.MartialStatus).HasMaxLength(50);

                entity.Property(e => e.Memactive)
                    .HasColumnName("memactive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MobileNo)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Mphoto)
                    .HasColumnType("image")
                    .HasColumnName("mphoto");

                entity.Property(e => e.Mstate)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("MState");

                entity.Property(e => e.NomineeAadharCard)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomineeAge).HasMaxLength(50);

                entity.Property(e => e.NomineeMobileNo)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.NomineeName).HasMaxLength(50);

                entity.Property(e => e.NomineePanCard)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomineeRelation).HasMaxLength(50);

                entity.Property(e => e.OffAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OfficerChangeDate).HasColumnType("datetime");

                entity.Property(e => e.PanCardNo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.PhotoIdentityNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Photoid)
                    .HasColumnType("image")
                    .HasColumnName("photoid");

                entity.Property(e => e.Pincode).HasColumnName("pincode");

                entity.Property(e => e.Rationcardno)
                    .HasMaxLength(50)
                    .HasColumnName("rationcardno");

                entity.Property(e => e.Reason).HasMaxLength(50);

                entity.Property(e => e.Religion).HasMaxLength(50);

                entity.Property(e => e.ResAddress).HasMaxLength(500);

                entity.Property(e => e.SpouseDob)
                    .HasColumnType("date")
                    .HasColumnName("SpouseDOB");

                entity.Property(e => e.SpouseName).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.TebusinessActivity)
                    .HasColumnType("image")
                    .HasColumnName("TEBusinessActivity");

                entity.Property(e => e.TelPhoneNo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Uidno).HasMaxLength(50);

                entity.Property(e => e.VebusinessActivity)
                    .HasColumnType("image")
                    .HasColumnName("VEBusinessActivity");

                entity.Property(e => e.VoterIdcardno).HasMaxLength(50);
            });

            modelBuilder.Entity<CustomerDetails>(entity =>
            {
                entity.HasKey(e => e.Cdid);

                entity.Property(e => e.Cdid).HasColumnName("CDID");

                entity.Property(e => e.BeniAccountNo)
                    .HasMaxLength(200)
                    .HasColumnName("Beni_Account_No");

                entity.Property(e => e.BeniAddress)
                    .HasMaxLength(200)
                    .HasColumnName("Beni_Address");

                entity.Property(e => e.BeniBankName)
                    .HasMaxLength(200)
                    .HasColumnName("Beni_Bank_Name");

                entity.Property(e => e.BeniBranchName)
                    .HasMaxLength(200)
                    .HasColumnName("Beni_Branch_Name");

                entity.Property(e => e.BeniIfscCode)
                    .HasMaxLength(200)
                    .HasColumnName("Beni_IFSC_Code");

                entity.Property(e => e.BeniName)
                    .HasMaxLength(200)
                    .HasColumnName("Beni_Name");
            });

            modelBuilder.Entity<CustomerTransfer>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            });

            modelBuilder.Entity<Day>(entity =>
            {
                entity.HasKey(e => e.DaysId);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Statement).HasMaxLength(501);
            });

            modelBuilder.Entity<Disbursement>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.AreaId, "Disbursment_AreaId");

                entity.HasIndex(e => e.BranchId, "Disbursment_BranchId");

                entity.HasIndex(e => e.CustomerId, "Disbursment_CustomerID");

                entity.HasIndex(e => e.GroupId, "Disbursment_GroupId");

                entity.Property(e => e.Approval).HasMaxLength(50);

                entity.Property(e => e.CsrCode)
                    .HasMaxLength(50)
                    .HasColumnName("CSR_Code");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.DisburseDate).HasColumnType("datetime");

                entity.Property(e => e.DisbursementId).ValueGeneratedOnAdd();

                entity.Property(e => e.FirstInstallmentDate).HasColumnType("datetime");

                entity.Property(e => e.LoanCycleNo).HasMaxLength(50);

                entity.Property(e => e.Otp)
                    .HasMaxLength(50)
                    .HasColumnName("OTP");

                entity.Property(e => e.ProductCode).HasMaxLength(50);

                entity.Property(e => e.Upfront).HasMaxLength(50);

                entity.Property(e => e.VerifyOtp)
                    .HasMaxLength(50)
                    .HasColumnName("VerifyOTP");
            });

            modelBuilder.Entity<Emiinstallments>(entity =>
            {
                entity.ToTable("EMIInstallments");

                entity.HasIndex(e => e.CustomerId, "EMIInstallments_CustomerID");

                entity.HasIndex(e => e.DisbursementId, "EMIInstallments_DisbursementId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.DateOfEmi)
                    .HasMaxLength(50)
                    .HasColumnName("DateOfEMI");

                entity.Property(e => e.Emi)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("EMI");

                entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Outstanding).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrincipalOutstanding).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<FaceTagging>(entity =>
            {
                entity.Property(e => e.Cgt1matchPercentage).HasColumnName("CGT1MatchPercentage");

                entity.Property(e => e.Cgt1taggedPhoto)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("CGT1TaggedPhoto");

                entity.Property(e => e.Cgt2matchPercentage).HasColumnName("CGT2MatchPercentage");

                entity.Property(e => e.Cgt2taggedPhoto)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("CGT2TaggedPhoto");

                entity.Property(e => e.CreationDateTime)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FsappraisalDateTime)
                    .HasMaxLength(50)
                    .HasColumnName("FSAppraisalDateTime");

                entity.Property(e => e.FsappraisalMatchPercentage).HasColumnName("FSAppraisalMatchPercentage");

                entity.Property(e => e.FsappraisalPhoto)
                    .HasColumnType("image")
                    .HasColumnName("FSAppraisalPhoto");

                entity.Property(e => e.FsfaceTaggingStatus).HasColumnName("FSFaceTaggingStatus");
            });

            modelBuilder.Entity<GlinstallmentOtp>(entity =>
            {
                entity.HasKey(e => e.InstallmentId);

                entity.ToTable("GLInstallmentOtp");

                entity.HasIndex(e => e.AreaId, "GLInstallmentOtp_AreaId");

                entity.HasIndex(e => e.BranchId, "GLInstallmentOtp_BranchId");

                entity.HasIndex(e => e.GroupId, "GLInstallmentOtp_GroupId");

                entity.Property(e => e.InstallmentDate).HasColumnType("datetime");

                entity.Property(e => e.IsMsgSent).HasDefaultValueSql("((0))");

                entity.Property(e => e.Otp)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("OTP");

                entity.Property(e => e.VerifyOtp)
                    .HasMaxLength(50)
                    .HasColumnName("VerifyOTP");
            });

            modelBuilder.Entity<GroupMember>(entity =>
            {
                entity.HasIndex(e => e.BranchId, "GroupMember_BranchId");

                entity.HasIndex(e => e.CustomerId, "GroupMember_CustomerID");

                entity.HasIndex(e => e.GroupId, "GroupMember_GroupId");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            });

            modelBuilder.Entity<GroupTrainingProcess>(entity =>
            {
                entity.Property(e => e.Comments).HasMaxLength(105);

                entity.Property(e => e.DayPhoto).HasColumnType("image");

                entity.Property(e => e.ProcessDate).HasColumnType("datetime");

                entity.HasOne(d => d.Days)
                    .WithMany(p => p.GroupTrainingProcess)
                    .HasForeignKey(d => d.DaysId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupTrainingProcess_Day");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.GroupTrainingProcess)
                    .HasForeignKey(d => d.ProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupTrainingProcess_Process");
            });

            modelBuilder.Entity<ImportwithAccount>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BranchName).HasMaxLength(255);

                entity.Property(e => e.CenterName).HasMaxLength(255);

                entity.Property(e => e.Csrcode).HasColumnName("CSRCode");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerName).HasMaxLength(255);

                entity.Property(e => e.LoanCycleNo).HasMaxLength(255);

                entity.Property(e => e.MartialStatus).HasMaxLength(255);

                entity.Property(e => e.NomineeAge).HasMaxLength(255);

                entity.Property(e => e.NomineeName).HasMaxLength(255);

                entity.Property(e => e.NomineeRelation).HasMaxLength(255);

                entity.Property(e => e.SpouseDob)
                    .HasMaxLength(255)
                    .HasColumnName("SpouseDOB");

                entity.Property(e => e.SpouseName).HasMaxLength(255);

                entity.Property(e => e.VerifyAccountNo).HasColumnName("VerifyAccountNO");
            });

            modelBuilder.Entity<LoanAccount>(entity =>
            {
                entity.HasKey(e => e.LoanId);

                entity.HasIndex(e => e.CustomerId, "UQ__LoanAcco__A4AE64B9710224E4")
                    .IsUnique();

                entity.Property(e => e.AccountVerification).HasDefaultValueSql("((0))");

                entity.Property(e => e.Accountdate).HasColumnType("date");

                entity.Property(e => e.Balance).HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.FirstInstallmentDate).HasColumnType("datetime");

                entity.Property(e => e.Installmentamount).HasColumnName("installmentamount");

                entity.Property(e => e.InterestType).HasMaxLength(50);

                entity.Property(e => e.OdinterestAmount)
                    .HasColumnName("ODInterestAmount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.TotalAmount).HasColumnName("totalAmount");
            });

            modelBuilder.Entity<LoanApplicant>(entity =>
            {
                entity.Property(e => e.ApplicantImage).HasColumnType("image");

                entity.Property(e => e.ApplicantPhoto).HasColumnType("image");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryOfBirth).HasMaxLength(50);

                entity.Property(e => e.CurrentAddr)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Currentresidencestatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("currentresidencestatus");

                entity.Property(e => e.DateofBirth).HasColumnType("date");

                entity.Property(e => e.Designation).HasMaxLength(50);

                entity.Property(e => e.Education)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(101)
                    .HasColumnName("EmailID");

                entity.Property(e => e.EmployeeNo).HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(77);

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasMaxLength(23);

                entity.Property(e => e.Icardphoto).HasColumnType("image");

                entity.Property(e => e.MartialStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MobileNo)
                    .IsRequired()
                    .HasMaxLength(23);

                entity.Property(e => e.NameofCompany).HasMaxLength(50);

                entity.Property(e => e.Occupation).HasMaxLength(50);

                entity.Property(e => e.OfficeAddress).HasMaxLength(255);

                entity.Property(e => e.OfficeState).HasMaxLength(50);

                entity.Property(e => e.Officecity).HasMaxLength(50);

                entity.Property(e => e.PanCardNo).HasMaxLength(50);

                entity.Property(e => e.PermanentAddr)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PhotoIdentityNumber).HasMaxLength(50);

                entity.Property(e => e.PhotoIdentityType).HasMaxLength(50);

                entity.Property(e => e.Religion).HasMaxLength(50);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TelephoneNo).HasMaxLength(23);

                entity.Property(e => e.Yearcurrentaddr).HasColumnName("yearcurrentaddr");
            });

            modelBuilder.Entity<LoanApplication>(entity =>
            {
                entity.Property(e => e.ApplicationStatus)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.PurposeofLoan).HasMaxLength(250);
            });

            modelBuilder.Entity<LoanTransaction>(entity =>
            {
                entity.HasIndex(e => e.AccountNo, "LoanTransaction_AccountNo");

                entity.Property(e => e.Balance).HasDefaultValueSql("((0))");

                entity.Property(e => e.BankName).HasMaxLength(75);

                entity.Property(e => e.Chequeno).HasMaxLength(50);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Depositdate).HasColumnType("datetime");

                entity.Property(e => e.Interestamount).HasColumnName("interestamount");

                entity.Property(e => e.Odinterest)
                    .HasColumnName("ODInterest")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OdinterestAmount)
                    .HasColumnName("ODInterestAmount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Odprinciple).HasColumnName("ODPrinciple");

                entity.Property(e => e.Principal).HasColumnName("principal");

                entity.Property(e => e.Remark).HasMaxLength(50);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.TransactionType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LoanType>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.InstallMentFrequency).HasMaxLength(50);

                entity.Property(e => e.InterestType).HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<LogTransaction>(entity =>
            {
                entity.HasIndex(e => e.LoanTransactionId, "LogTransaction_LoanTransactionId");

                entity.Property(e => e.DepositDate).HasColumnType("datetime");

                entity.Property(e => e.Installment).HasColumnType("money");

                entity.Property(e => e.Nbalance)
                    .HasColumnType("money")
                    .HasColumnName("NBalance");

                entity.Property(e => e.Ninterest)
                    .HasColumnType("money")
                    .HasColumnName("NInterest");

                entity.Property(e => e.Nprinciple)
                    .HasColumnType("money")
                    .HasColumnName("NPrinciple");

                entity.Property(e => e.Pbalance)
                    .HasColumnType("money")
                    .HasColumnName("PBalance");

                entity.Property(e => e.Pinterest)
                    .HasColumnType("money")
                    .HasColumnName("PInterest");

                entity.Property(e => e.Pprinciple)
                    .HasColumnType("money")
                    .HasColumnName("PPrinciple");
            });

            modelBuilder.Entity<Mbb>(entity =>
            {
                entity.ToTable("MBB");

                entity.Property(e => e.Mbbid).HasColumnName("MBBId");

                entity.Property(e => e.AreaName).IsRequired();

                entity.Property(e => e.CreationDatetime).HasColumnType("datetime");

                entity.Property(e => e.Frequency).HasMaxLength(100);

                entity.Property(e => e.LatLong).HasMaxLength(50);

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.Pincode).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Mbbattendance>(entity =>
            {
                entity.ToTable("MBBAttendance");

                entity.Property(e => e.MbbattendanceId).HasColumnName("MBBAttendanceId");

                entity.Property(e => e.AttendanceDateTime).HasColumnType("datetime");

                entity.Property(e => e.LatLong).HasMaxLength(50);

                entity.Property(e => e.Mbbid).HasColumnName("MBBId");

                entity.Property(e => e.Mbbname).HasColumnName("MBBName");
            });

            modelBuilder.Entity<MeetingParticipants>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AddedAt).HasMaxLength(50);

                entity.Property(e => e.BrandingId).HasColumnName("BrandingID");

                entity.Property(e => e.CreationTime)
                    .HasColumnType("datetime")
                    .HasColumnName("creationTime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ParticipantName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParticipantNumber)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MemberLimit>(entity =>
            {
                entity.Property(e => e.Description).HasMaxLength(101);
            });

            modelBuilder.Entity<Process>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Question>(entity =>
            {
                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.QuestionDescription).IsRequired();
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SavingAccount>(entity =>
            {
                entity.HasKey(e => e.SavingId);

                entity.HasIndex(e => e.CustomerId, "SavingAccount_CustomerID");

                entity.HasIndex(e => e.SavingaccountNo, "SavingAccount_SavingaccountNo");

                entity.HasIndex(e => e.CustomerId, "UQ__SavingAc__A4AE64B9E9D26ACF")
                    .IsUnique();

                entity.Property(e => e.AccountVerification).HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.OpenDate).HasColumnType("date");
            });

            modelBuilder.Entity<SavingTransaction>(entity =>
            {
                entity.HasIndex(e => e.AccountNo, "SavingTransaction_AccountNo");

                entity.HasIndex(e => e.CustomerId, "SavingTransaction_CustomerID");

                entity.HasIndex(e => e.Depositdate, "SavingTransaction_Depositdate");

                entity.HasIndex(e => e.LoanTransactionId, "SavingTransaction_LoanTransactionId");

                entity.Property(e => e.Balance).HasDefaultValueSql("((0))");

                entity.Property(e => e.BankName).HasMaxLength(75);

                entity.Property(e => e.Chequeno).HasMaxLength(50);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Depositdate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(50);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.TransactionType).HasMaxLength(50);

                entity.HasOne(d => d.LoanTransaction)
                    .WithMany(p => p.SavingTransaction)
                    .HasForeignKey(d => d.LoanTransactionId)
                    .HasConstraintName("fk");
            });

            modelBuilder.Entity<SecurityAnswers>(entity =>
            {
                entity.HasKey(e => e.AnswerId);

                entity.HasIndex(e => e.CustomerId, "SecurityAnswers_CustomerID");

                entity.HasIndex(e => e.QuestionId, "SecurityAnswers_QuestionId");

                entity.HasIndex(e => e.UserId, "SecurityAnswers_UserId");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.LastModifiedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SecurityAnswers)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_SecurityAnswers_Customer");

                entity.HasOne(d => d.QuestionNavigation)
                    .WithMany(p => p.SecurityAnswers)
                    .HasForeignKey(d => d.QuestionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_SecurityAnswers_SecurityQuestions");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SecurityAnswers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_SecurityAnswers_UserInfo");
            });

            modelBuilder.Entity<SecurityQuestions>(entity =>
            {
                entity.HasKey(e => e.QuestionId);

                entity.Property(e => e.Question).IsRequired();
            });

            modelBuilder.Entity<Sms>(entity =>
            {
                entity.ToTable("sms");

                entity.Property(e => e.Smsid).HasColumnName("smsid");

                entity.Property(e => e.Apikey)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("apikey");

                entity.Property(e => e.Gatewayurl)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("gatewayurl");

                entity.Property(e => e.Senderid)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("senderid");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<SubmittedCollectionAmount>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AmountReceipt).HasColumnType("image");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Teid).HasColumnName("TEID");
            });

            modelBuilder.Entity<Survey>(entity =>
            {
                entity.Property(e => e.AreaName).HasMaxLength(50);

                entity.Property(e => e.Csrapprove)
                    .HasMaxLength(50)
                    .HasColumnName("CSRApprove")
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ManagerApprove)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.OpinionCsr)
                    .HasMaxLength(250)
                    .HasColumnName("OpinionCSR");

                entity.Property(e => e.OpinionKeyperson).HasMaxLength(250);

                entity.Property(e => e.SurveyDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SurveyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AgriinputShop).HasDefaultValueSql("((0))");

                entity.Property(e => e.Agriprocessingunits).HasDefaultValueSql("((0))");

                entity.Property(e => e.AreaName).HasMaxLength(50);

                entity.Property(e => e.AutoService).HasMaxLength(50);

                entity.Property(e => e.BusService).HasMaxLength(50);

                entity.Property(e => e.Commercialbankbranch).HasDefaultValueSql("((0))");

                entity.Property(e => e.Commercialbankbranchclient).HasDefaultValueSql("((0))");

                entity.Property(e => e.CooperativeCreditsociety).HasDefaultValueSql("((0))");

                entity.Property(e => e.CooperativeCreditsocietyclient).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cooperativebankbranch).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cooperativebankbranchclient).HasDefaultValueSql("((0))");

                entity.Property(e => e.Crop1Name).HasMaxLength(50);

                entity.Property(e => e.Crop2Name).HasMaxLength(50);

                entity.Property(e => e.Crop3Name).HasMaxLength(50);

                entity.Property(e => e.Crop4Name).HasMaxLength(50);

                entity.Property(e => e.CycleShop).HasDefaultValueSql("((0))");

                entity.Property(e => e.DairySociety).HasDefaultValueSql("((0))");

                entity.Property(e => e.DairySocietyClients).HasDefaultValueSql("((0))");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Electricalrepairandservice).HasDefaultValueSql("((0))");

                entity.Property(e => e.FarmerClub).HasDefaultValueSql("((0))");

                entity.Property(e => e.FarmerClubClients).HasDefaultValueSql("((0))");

                entity.Property(e => e.ForestLand).HasDefaultValueSql("((0))");

                entity.Property(e => e.Grameenbankbranch).HasDefaultValueSql("((0))");

                entity.Property(e => e.Grameenbankbranchclient).HasDefaultValueSql("((0))");

                entity.Property(e => e.Hotel).HasDefaultValueSql("((0))");

                entity.Property(e => e.Irrigated).HasDefaultValueSql("((0))");

                entity.Property(e => e.Kirana).HasDefaultValueSql("((0))");

                entity.Property(e => e.Market).HasMaxLength(50);

                entity.Property(e => e.Mfis1Client)
                    .HasColumnName("MFIs1Client")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mfis1Name)
                    .HasMaxLength(50)
                    .HasColumnName("MFIs1Name");

                entity.Property(e => e.Mfis1Number)
                    .HasColumnName("MFIs1Number")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mfis2Client).HasColumnName("MFIs2Client");

                entity.Property(e => e.Mfis2Name)
                    .HasMaxLength(50)
                    .HasColumnName("MFIs2Name");

                entity.Property(e => e.Mfis2Number).HasColumnName("MFIs2Number");

                entity.Property(e => e.Mfis3Client).HasColumnName("MFIs3Client");

                entity.Property(e => e.Mfis3Name)
                    .HasMaxLength(50)
                    .HasColumnName("MFIs3Name");

                entity.Property(e => e.Mfis3Number).HasColumnName("MFIs3Number");

                entity.Property(e => e.Mfis4Client).HasColumnName("MFIs4Client");

                entity.Property(e => e.Mfis4Name)
                    .HasMaxLength(50)
                    .HasColumnName("MFIs4Name");

                entity.Property(e => e.Mfis4Number).HasColumnName("MFIs4Number");

                entity.Property(e => e.Minorityhouse).HasDefaultValueSql("((0))");

                entity.Property(e => e.Obchouse)
                    .HasColumnName("OBChouse")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Others).HasDefaultValueSql("((0))");

                entity.Property(e => e.Panshop).HasDefaultValueSql("((0))");

                entity.Property(e => e.PoliceStation)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrimaryHealthCareCenter)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrimarySchool).HasMaxLength(50);

                entity.Property(e => e.PrimarySchooldistance).HasDefaultValueSql("((0))");

                entity.Property(e => e.Qualityofroad).HasMaxLength(50);

                entity.Property(e => e.Rainfed).HasDefaultValueSql("((0))");

                entity.Property(e => e.Schouse)
                    .HasColumnName("schouse")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Shgs)
                    .HasColumnName("SHGs")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ShgsClients)
                    .HasColumnName("SHGsClients")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sthouse)
                    .HasColumnName("sthouse")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SurveyDate).HasColumnType("datetime");

                entity.Property(e => e.TailoringShop).HasDefaultValueSql("((0))");

                entity.Property(e => e.TeaShop).HasDefaultValueSql("((0))");

                entity.Property(e => e.Utensil)
                    .HasColumnName("utensil")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WaterReservior).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SurveyInformation>(entity =>
            {
                entity.Property(e => e.AgriinputShop).HasDefaultValueSql("((0))");

                entity.Property(e => e.Agriprocessingunits).HasDefaultValueSql("((0))");

                entity.Property(e => e.AreaName).HasMaxLength(50);

                entity.Property(e => e.AutoService).HasMaxLength(50);

                entity.Property(e => e.BusService).HasMaxLength(50);

                entity.Property(e => e.Commercialbankbranch).HasDefaultValueSql("((0))");

                entity.Property(e => e.Commercialbankbranchclient).HasDefaultValueSql("((0))");

                entity.Property(e => e.CooperativeCreditsociety).HasDefaultValueSql("((0))");

                entity.Property(e => e.CooperativeCreditsocietyclient).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cooperativebankbranch).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cooperativebankbranchclient).HasDefaultValueSql("((0))");

                entity.Property(e => e.Crop1Name).HasMaxLength(50);

                entity.Property(e => e.Crop2Name).HasMaxLength(50);

                entity.Property(e => e.Crop3Name).HasMaxLength(50);

                entity.Property(e => e.Crop4Name).HasMaxLength(50);

                entity.Property(e => e.Csrapprove)
                    .HasMaxLength(50)
                    .HasColumnName("CSRApprove")
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.Csrdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CSRdate");

                entity.Property(e => e.CycleShop).HasDefaultValueSql("((0))");

                entity.Property(e => e.DairySociety).HasDefaultValueSql("((0))");

                entity.Property(e => e.DairySocietyClients).HasDefaultValueSql("((0))");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Electricalrepairandservice).HasDefaultValueSql("((0))");

                entity.Property(e => e.FarmerClub).HasDefaultValueSql("((0))");

                entity.Property(e => e.FarmerClubClients).HasDefaultValueSql("((0))");

                entity.Property(e => e.Folatitude)
                    .HasMaxLength(50)
                    .HasColumnName("FOLatitude");

                entity.Property(e => e.Folongitude)
                    .HasMaxLength(50)
                    .HasColumnName("FOLongitude");

                entity.Property(e => e.ForestLand).HasDefaultValueSql("((0))");

                entity.Property(e => e.FsagriinputShop)
                    .HasColumnName("FSAgriinputShop")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsagriprocessingunits)
                    .HasColumnName("FSAgriprocessingunits")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FsautoService)
                    .HasMaxLength(50)
                    .HasColumnName("FSAutoService");

                entity.Property(e => e.FsbusService)
                    .HasMaxLength(50)
                    .HasColumnName("FSBusService");

                entity.Property(e => e.Fscommercialbankbranch)
                    .HasColumnName("FSCommercialbankbranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fscommercialbankbranchclient)
                    .HasColumnName("FSCommercialbankbranchclient")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FscooperativeCreditsociety)
                    .HasColumnName("FSCooperativeCreditsociety")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FscooperativeCreditsocietyclient)
                    .HasColumnName("FSCooperativeCreditsocietyclient")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fscooperativebankbranch)
                    .HasColumnName("FSCooperativebankbranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fscooperativebankbranchclient)
                    .HasColumnName("FSCooperativebankbranchclient")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fscrop1AcresunderCultivation).HasColumnName("FSCrop1AcresunderCultivation");

                entity.Property(e => e.Fscrop1Name)
                    .HasMaxLength(50)
                    .HasColumnName("FSCrop1Name");

                entity.Property(e => e.Fscrop1peracreyieldinkg).HasColumnName("FSCrop1peracreyieldinkg");

                entity.Property(e => e.Fscrop2AcresunderCultivation).HasColumnName("FSCrop2AcresunderCultivation");

                entity.Property(e => e.Fscrop2Name)
                    .HasMaxLength(50)
                    .HasColumnName("FSCrop2Name");

                entity.Property(e => e.Fscrop2peracreyieldinkg).HasColumnName("FSCrop2peracreyieldinkg");

                entity.Property(e => e.Fscrop3AcresunderCultivation).HasColumnName("FSCrop3AcresunderCultivation");

                entity.Property(e => e.Fscrop3Name)
                    .HasMaxLength(50)
                    .HasColumnName("FSCrop3Name");

                entity.Property(e => e.Fscrop3peracreyieldinkg).HasColumnName("FSCrop3peracreyieldinkg");

                entity.Property(e => e.Fscrop4AcresunderCultivation).HasColumnName("FSCrop4AcresunderCultivation");

                entity.Property(e => e.Fscrop4Name)
                    .HasMaxLength(50)
                    .HasColumnName("FSCrop4Name");

                entity.Property(e => e.Fscrop4peracreyieldinkg).HasColumnName("FSCrop4peracreyieldinkg");

                entity.Property(e => e.FscycleShop)
                    .HasColumnName("FSCycleShop")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FsdairySociety)
                    .HasColumnName("FSDairySociety")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FsdairySocietyClients)
                    .HasColumnName("FSDairySocietyClients")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fselectricalrepairandservice)
                    .HasColumnName("FSElectricalrepairandservice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FsfarmerClub)
                    .HasColumnName("FSFarmerClub")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FsfarmerClubClients)
                    .HasColumnName("FSFarmerClubClients")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FsforestLand)
                    .HasColumnName("FSForestLand")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsgrameenbankbranch)
                    .HasColumnName("FSGrameenbankbranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsgrameenbankbranchclient)
                    .HasColumnName("FSGrameenbankbranchclient")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fshotel)
                    .HasColumnName("FSHotel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsirrigated)
                    .HasColumnName("FSIrrigated")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fskirana)
                    .HasColumnName("FSKirana")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fslatitude)
                    .HasMaxLength(50)
                    .HasColumnName("FSLatitude");

                entity.Property(e => e.Fslongitude)
                    .HasMaxLength(50)
                    .HasColumnName("FSLongitude");

                entity.Property(e => e.Fsmarket)
                    .HasMaxLength(50)
                    .HasColumnName("FSMarket");

                entity.Property(e => e.Fsmfis1Client)
                    .HasColumnName("FSMFIs1Client")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsmfis1Name)
                    .HasMaxLength(50)
                    .HasColumnName("FSMFIs1Name");

                entity.Property(e => e.Fsmfis1Number)
                    .HasColumnName("FSMFIs1Number")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsmfis2Client).HasColumnName("FSMFIs2Client");

                entity.Property(e => e.Fsmfis2Name)
                    .HasMaxLength(50)
                    .HasColumnName("FSMFIs2Name");

                entity.Property(e => e.Fsmfis2Number).HasColumnName("FSMFIs2Number");

                entity.Property(e => e.Fsmfis3Client).HasColumnName("FSMFIs3Client");

                entity.Property(e => e.Fsmfis3Name)
                    .HasMaxLength(50)
                    .HasColumnName("FSMFIs3Name");

                entity.Property(e => e.Fsmfis3Number).HasColumnName("FSMFIs3Number");

                entity.Property(e => e.Fsmfis4Client).HasColumnName("FSMFIs4Client");

                entity.Property(e => e.Fsmfis4Name)
                    .HasMaxLength(50)
                    .HasColumnName("FSMFIs4Name");

                entity.Property(e => e.Fsmfis4Number).HasColumnName("FSMFIs4Number");

                entity.Property(e => e.Fsminorityhouse)
                    .HasColumnName("FSMinorityhouse")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsobchouse)
                    .HasColumnName("FSOBChouse")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsothers)
                    .HasColumnName("FSOthers")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fspanshop)
                    .HasColumnName("FSPanshop")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fspic)
                    .HasColumnType("image")
                    .HasColumnName("FSPic");

                entity.Property(e => e.FspoliceStation)
                    .HasMaxLength(50)
                    .HasColumnName("FSPoliceStation")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FsprimaryHealthCareCenter)
                    .HasMaxLength(50)
                    .HasColumnName("FSPrimaryHealthCareCenter")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FsprimarySchool)
                    .HasMaxLength(50)
                    .HasColumnName("FSPrimarySchool");

                entity.Property(e => e.FsprimarySchooldistance)
                    .HasColumnName("FSPrimarySchooldistance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsqualityofroad)
                    .HasMaxLength(50)
                    .HasColumnName("FSQualityofroad");

                entity.Property(e => e.Fsrainfed)
                    .HasColumnName("FSRainfed")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsschouse)
                    .HasColumnName("FSschouse")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsshgs)
                    .HasColumnName("FSSHGs")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FsshgsClients)
                    .HasColumnName("FSSHGsClients")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fssthouse)
                    .HasColumnName("FSsthouse")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FstailoringShop)
                    .HasColumnName("FSTailoringShop")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FsteaShop)
                    .HasColumnName("FSTeaShop")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FstotalArea).HasColumnName("FSTotalArea");

                entity.Property(e => e.Fstotalhouse).HasColumnName("FSTotalhouse");

                entity.Property(e => e.Fsutensil)
                    .HasColumnName("FSutensil")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FswaterReservior)
                    .HasColumnName("FSWaterReservior")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Grameenbankbranch).HasDefaultValueSql("((0))");

                entity.Property(e => e.Grameenbankbranchclient).HasDefaultValueSql("((0))");

                entity.Property(e => e.Hotel).HasDefaultValueSql("((0))");

                entity.Property(e => e.Irrigated).HasDefaultValueSql("((0))");

                entity.Property(e => e.Kirana).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManagerApprove)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Pending')");

                entity.Property(e => e.Mangerdate).HasColumnType("datetime");

                entity.Property(e => e.Market).HasMaxLength(50);

                entity.Property(e => e.Mfis1Client)
                    .HasColumnName("MFIs1Client")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mfis1Name)
                    .HasMaxLength(50)
                    .HasColumnName("MFIs1Name");

                entity.Property(e => e.Mfis1Number)
                    .HasColumnName("MFIs1Number")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mfis2Client).HasColumnName("MFIs2Client");

                entity.Property(e => e.Mfis2Name)
                    .HasMaxLength(50)
                    .HasColumnName("MFIs2Name");

                entity.Property(e => e.Mfis2Number).HasColumnName("MFIs2Number");

                entity.Property(e => e.Mfis3Client).HasColumnName("MFIs3Client");

                entity.Property(e => e.Mfis3Name)
                    .HasMaxLength(50)
                    .HasColumnName("MFIs3Name");

                entity.Property(e => e.Mfis3Number).HasColumnName("MFIs3Number");

                entity.Property(e => e.Mfis4Client).HasColumnName("MFIs4Client");

                entity.Property(e => e.Mfis4Name)
                    .HasMaxLength(50)
                    .HasColumnName("MFIs4Name");

                entity.Property(e => e.Mfis4Number).HasColumnName("MFIs4Number");

                entity.Property(e => e.Minorityhouse).HasDefaultValueSql("((0))");

                entity.Property(e => e.Obchouse)
                    .HasColumnName("OBChouse")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OfficerChangeDate).HasColumnType("datetime");

                entity.Property(e => e.OpinionKeyperson).HasMaxLength(250);

                entity.Property(e => e.OpnionCsr)
                    .HasMaxLength(250)
                    .HasColumnName("OpnionCSR");

                entity.Property(e => e.Others).HasDefaultValueSql("((0))");

                entity.Property(e => e.Panshop).HasDefaultValueSql("((0))");

                entity.Property(e => e.PoliceStation)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrimaryHealthCareCenter)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrimarySchool).HasMaxLength(50);

                entity.Property(e => e.PrimarySchooldistance).HasDefaultValueSql("((0))");

                entity.Property(e => e.Qualityofroad).HasMaxLength(50);

                entity.Property(e => e.Rainfed).HasDefaultValueSql("((0))");

                entity.Property(e => e.Schouse)
                    .HasColumnName("schouse")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Shgs)
                    .HasColumnName("SHGs")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ShgsClients)
                    .HasColumnName("SHGsClients")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sthouse)
                    .HasColumnName("sthouse")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SurveyDate).HasColumnType("datetime");

                entity.Property(e => e.TailoringShop).HasDefaultValueSql("((0))");

                entity.Property(e => e.TeaShop).HasDefaultValueSql("((0))");

                entity.Property(e => e.Utensil)
                    .HasColumnName("utensil")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WaterReservior).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TrainingAnswers>(entity =>
            {
                entity.HasKey(e => e.TrainingAnswerId);
            });

            modelBuilder.Entity<TrainingQuestions>(entity =>
            {
                entity.HasKey(e => e.TrainingQuestionId);

                entity.Property(e => e.Answer).HasMaxLength(50);

                entity.Property(e => e.Option1).HasMaxLength(200);

                entity.Property(e => e.Option2).HasMaxLength(200);

                entity.Property(e => e.Option3).HasMaxLength(200);

                entity.Property(e => e.Option4).HasMaxLength(200);

                entity.HasOne(d => d.Test)
                    .WithMany(p => p.TrainingQuestions)
                    .HasForeignKey(d => d.TestId)
                    .HasConstraintName("FK_TrainingQuestions_TrainingTest");
            });

            modelBuilder.Entity<TrainingReport>(entity =>
            {
                entity.Property(e => e.TrainingReportId).HasColumnName("TrainingReportID");

                entity.Property(e => e.Result)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TestDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<TrainingTest>(entity =>
            {
                entity.HasKey(e => e.TestId);

                entity.Property(e => e.TestId).HasColumnName("TestID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.TestUrl).HasColumnName("TestURL");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.TrainingTest)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_TrainingTest_Role");
            });

            modelBuilder.Entity<UserInfo>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__User__1788CC4C062756D8");

                entity.HasIndex(e => e.Username, "IX_UserInfo")
                    .IsUnique();

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.Apassword)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.AssociatedBeid).HasColumnName("AssociatedBEId");

                entity.Property(e => e.Designation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmployeeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserMobileNo)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Userimage).HasColumnType("image");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UserTarget>(entity =>
            {
                entity.Property(e => e.AssignMonth).HasColumnType("date");

                entity.Property(e => e.Createddate).HasColumnType("datetime");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingGeneratedFunctions(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}