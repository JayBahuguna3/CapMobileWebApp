// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Data;
using System.Linq;
using CapMobileWebApp.DAL.Model;

namespace CapMobileWebApp.DAL.Context
{
    public partial class CapRetailContext
    {

        [DbFunction("calcgtdays", "dbo")]
        public static int? calcgtdays(long? CenterID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("Countprocessindays", "dbo")]
        public static int? Countprocessindays(int? startdays, int? enddays, string role, long? UserId, long? BranchId)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("DateMonthDiff", "dbo")]
        public static int? DateMonthDiff(DateTime? startdate, DateTime? enddate)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnBelow100", "dbo")]
        public static string fnBelow100(int? Num)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnBelow20", "dbo")]
        public static string fnBelow20(int? Num)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getbalance", "dbo")]
        public static double? getbalance(long? AccountNo, long? CustomerID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getCountOfCustomerForPerformance", "dbo")]
        public static long? getCountOfCustomerForPerformance(long? Areaid, string mode)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getdates", "dbo")]
        public static DateTime? getdates(long? CenterID, string mode)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getdatesforPendingApparaisal", "dbo")]
        public static DateTime? getdatesforPendingApparaisal(long? CustomerID, string mode)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getgroupleader", "dbo")]
        public static string getgroupleader(long? AreaId)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getlasttransacdate", "dbo")]
        public static DateTime? getlasttransacdate(long? AccountNo, long? CustomerID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getlasttransacdetails", "dbo")]
        public static double? getlasttransacdetails(long? AccountNo, long? CustomerID, string type)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getoutint", "dbo")]
        public static double? getoutint(long? AccountNo)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getoutinterest", "dbo")]
        public static double? getoutinterest(long? CustomerID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getoverdueAmount", "dbo")]
        public static double? getoverdueAmount(long? AccountNo, long? CustomerID, int? Count)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getoverdueAmountTestJv", "dbo")]
        public static double? getoverdueAmountTestJv(long? AccountNoParam, long? CustomerIDParam, int? CountParam)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getoverduedays", "dbo")]
        public static int? getoverduedays(long? AccountNo, long? CustomerID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("getoverdueintpri", "dbo")]
        public static double? getoverdueintpri(long? AccountNo, long? CustomerID, int? intr)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("NumberToWords", "dbo")]
        public static string NumberToWords(long? Number)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("Split", "dbo")]
        public IQueryable<SplitResult> Split(string String, string Delimiter)
        {
            return FromExpression(() => Split(String, Delimiter));
        }

        protected void OnModelCreatingGeneratedFunctions(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SplitResult>().HasNoKey();
        }
    }
}
